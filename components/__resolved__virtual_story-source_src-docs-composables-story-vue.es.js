const __resolved__virtual_storySource_srcDocsComposablesStoryVue = '<template>\n  <Story\n    title="Composables"\n    docs-only\n    icon="la:book-open"\n    group="docs"\n  />\n</template>\n\n<docs lang="md">\n\n![](/composables.svg)\n\n## @gun-vue/composables\n\nGunVue Composables is a collection of utility functions based on [Vue 3 Composition API](https://v3.vuejs.org/guide/composition-api-introduction.html). We assume you are already familiar with the basic ideas of Composition API and [script setup](https://learnvue.co/2021/05/explaining-the-new-script-setup-type-in-vue-3-major-takeaways-from-the-rfc/#using-script-setup-with-a-normal-script) before you continue.\n\n### How to install?\n\n```shell\npnpm i @gun-vue/composables\n```\n\n### How to use?\n\n```js\nimport { useUser } from "@gun-vue/composables";\n\nconst user = useUser();\n```\n\n\n\n## Modules\n\n<table>\n  <thead>\n    <tr>\n      <th>Module</th><th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n<tr>\n    <td><a href="#useaccount" >useAccount</a></td>\n    <td><p>Basic user management</p>\n</td>\n    </tr>\n<tr>\n    <td><a href="#usechat" >useChat</a></td>\n    <td><p>Basic public chat</p>\n</td>\n    </tr>\n<tr>\n    <td><a href="#useprivatechat" >usePrivateChat</a></td>\n    <td><p>Basic private chat</p>\n</td>\n    </tr>\n<tr>\n    <td><a href="#usecrypto" >useCrypto</a></td>\n    <td><p>SEA cryptography abstraction</p>\n</td>\n    </tr>\n<tr>\n    <td><a href="#usedictionary" >useDictionary</a></td>\n    <td></td>\n    </tr>\n<tr>\n    <td><a href="#usefile" >useFile</a></td>\n    <td><p>File handling functions</p>\n</td>\n    </tr>\n<tr>\n    <td><a href="#usemd" >useMd</a></td>\n    <td><p>Handle Markdown files</p>\n</td>\n    </tr>\n<tr>\n    <td><a href="#usezip" >useZip</a></td>\n    <td><p>Read and write zip files</p>\n</td>\n    </tr>\n<tr>\n    <td><a href="#usegun" >useGun</a></td>\n    <td><p>Gun DB initialization and basic methods</p>\n</td>\n    </tr>\n<tr>\n    <td><a href="#userelay" >useRelay</a></td>\n    <td><p>Relay connection management</p>\n</td>\n    </tr>\n<tr>\n    <td><a href="#userelays" >useRelays</a></td>\n    <td><p>Loads the <a href="https://github.com/amark/gun/wiki/volunteer.dht">list of active volunteer DHT gun nodes</a>  and benchmarks ping for them</p>\n</td>\n    </tr>\n<tr>\n    <td><a href="#uselog" >useLog</a></td>\n    <td><p>Reactive version of <code>gun-util</code> Date tree</p>\n</td>\n    </tr>\n<tr>\n    <td><a href="#useworker" >useWorker</a></td>\n    <td><p>Worker wrapper for heavy functions</p>\n</td>\n    </tr>\n<tr>\n    <td><a href="#usepost" >usePost</a></td>\n    <td><p>Get and handle a particular post by it&#39;s tag and hash</p>\n</td>\n    </tr>\n<tr>\n    <td><a href="#useposts" >usePosts</a></td>\n    <td><p>Get and handle a particular post by it&#39;s tag and hash</p>\n</td>\n    </tr>\n<tr>\n    <td><a href="#usereaction" >useReaction</a></td>\n    <td><p>React to posts with emojis</p>\n</td>\n    </tr>\n<tr>\n    <td><a href="#usereactions" >useReactions</a></td>\n    <td><p>Reactions to posts with emojis</p>\n</td>\n    </tr>\n<tr>\n    <td><a href="#usetags" >useTags</a></td>\n    <td><p>Get and handle a particular post by it&#39;s tag and hash</p>\n</td>\n    </tr>\n<tr>\n    <td><a href="#projects" >Projects</a></td>\n    <td></td>\n    </tr>\n<tr>\n    <td><a href="#useroom" >useRoom</a></td>\n    <td></td>\n    </tr>\n<tr>\n    <td><a href="#usespace" >useSpace</a></td>\n    <td><p>A 2D-space</p>\n</td>\n    </tr>\n<tr>\n    <td><a href="#usecolor" >useColor</a></td>\n    <td><p>Deterministic colors derived from oub keys, hashes or any other string data</p>\n</td>\n    </tr>\n<tr>\n    <td><a href="#usemouse" >useMouse</a></td>\n    <td><p>Handle mouse movement inside an SVG</p>\n</td>\n    </tr>\n<tr>\n    <td><a href="#usemates" >useMates</a></td>\n    <td><p>Connections between accounts</p>\n</td>\n    </tr>\n<tr>\n    <td><a href="#usepass" >usePass</a></td>\n    <td><p>Manage user&#39;s password and credentials</p>\n</td>\n    </tr>\n<tr>\n    <td><a href="#useuser" >useUser</a></td>\n    <td><p>Basic user management</p>\n</td>\n    </tr>\n</tbody>\n</table>\n\n\n<a name="module_useAccount"></a>\n\n## useAccount\nBasic user management\n\n\n* [useAccount](#module_useAccount)\n    * _static_\n        * [.useAccount(pub)](#module_useAccount.useAccount) \u21D2 <code>account</code>\n    * _inner_\n        * [~account](#module_useAccount..account) : <code>computed(object)</code>\n\n### useAccount(pub) \u21D2 <code>account</code>\n  Load and handle user\'s account by a public key\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| pub | <code>ref(string)</code> \\| <code>string</code> | The public key of a user as a string or a ref |\n\n**Example**  \n```js\nimport { ref } from \'vue\'\nimport { useAccount, SEA } from \'@gun-vue/composables\'\n\nconst pub = ref()\n\nasync function generatePair() {\n pub.value = await SEA.pair()\n}\n\nconst { account } = useAccount(pub)\n\ngeneratePair()\n```\n### account : <code>computed(object)</code>\n  Reactive account data\n\n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| pub | <code>string</code> | the pub key |\n| color | <code>string</code> | the color hash of the pub key |\n| profile | <code>object</code> | all the profile fields of the account |\n| pulse | <code>number</code> | the recent presence timestamp |\n| blink | <code>boolean</code> | on/off switching pulse |\n| lastSeen | <code>&#x27;online&#x27;</code> \\| <code>string</code> | a human readable last seen status (\'online\' if less than TIMEOUT) |\n\n<hr />\n\n<a name="module_useChat"></a>\n\n## useChat\nBasic public chat\n\n<hr />\n\n<a name="module_usePrivateChat"></a>\n\n## usePrivateChat\nBasic private chat\n\n<hr />\n\n<a name="module_useCrypto"></a>\n\n## useCrypto\nSEA cryptography abstraction\n\n\n* [useCrypto](#module_useCrypto)\n    * _static_\n        * [.encFor(data, sender, receiver)](#module_useCrypto.encFor) \u21D2 <code>String</code>\n        * [.decFrom(data, sender, receiver)](#module_useCrypto.decFrom) \u21D2 <code>String</code>\n        * [.getShortHash(text, seed)](#module_useCrypto.getShortHash) \u21D2 <code>String</code>\n    * _inner_\n        * [~Entity](#module_useCrypto..Entity) : <code>Object</code>\n\n### encFor(data, sender, receiver) \u21D2 <code>String</code>\n  Encrypt data for one receiver entity\n1. Generates encryption secret using bob\'s epub and current user pair\n2. Enctypts data with this secret\n\n**Returns**: <code>String</code> - Encrypted data string to be sent  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| data | <code>String</code> | Stringified data to be encrypted |\n| sender | <code>Entity</code> | An object with `pub` and `epub` strings - the user.is object of the reciever\'s account |\n| receiver | <code>SEAPair</code> | SEA Pair of the sender \u2013 `epriv` key will be used to encrypt the data |\n\n### decFrom(data, sender, receiver) \u21D2 <code>String</code>\n  Decrypt a private message from an entity\n1. Generates secret using senders `epub` and current user pair\n2. Decrypts the data with this secret\n\n**Returns**: <code>String</code> - Decrypted data  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| data | <code>String</code> | Encrypted private data |\n| sender | <code>Entity</code> | An object with `pub` and `epub` strings - the user.is object of the sender\'s account |\n| receiver | <code>SEAPair</code> | SEA Pair of the receiver \u2013 `epriv` key will be used to encrypt the data |\n\n### getShortHash(text, seed) \u21D2 <code>String</code>\n  Calculate a hex hash for any string data\n\n**Returns**: <code>String</code> - The hex encoded SHA-1 hash  \n\n| Param | Type |\n| --- | --- |\n| text | <code>String</code> | \n| seed | <code>String</code> | \n\n### Entity : <code>Object</code>\n  **Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| pub | <code>String</code> | the public key |\n| epub | <code>String</code> | the elliplic encryption epub |\n\n<hr />\n\n<a name="module_useDictionary"></a>\n\n## useDictionary\n\n* [useDictionary](#module_useDictionary)\n    * [.useWords()](#module_useDictionary.useWords) \u21D2 <code>useWords</code>\n    * [.useDefs()](#module_useDictionary.useDefs) \u21D2 <code>useDefs</code>\n\n### useWords() \u21D2 <code>useWords</code>\n  Use filtrable words list\n\n### useDefs() \u21D2 <code>useDefs</code>\n  Dictionary definitions browser\n\n<hr />\n\n<a name="module_useFile"></a>\n\n## useFile\nFile handling functions\n\n\n* [useFile](#module_useFile)\n    * _static_\n        * [.downloadFile(text, fileType, fileName)](#module_useFile.downloadFile)\n        * [.uploadText(event, callback)](#module_useFile.uploadText)\n        * [.usePictureUpload(Options)](#module_useFile.usePictureUpload) \u21D2 <code>PictureUploadData</code>\n    * _inner_\n        * [~PictureUploadOptions](#module_useFile..PictureUploadOptions) : <code>Object</code>\n        * [~PictureUploadData](#module_useFile..PictureUploadData) : <code>Object</code>\n\n### downloadFile(text, fileType, fileName)\n  A method to download any text as a file\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| text | <code>String</code> | the text to download |\n| fileType | <code>String</code> | the file type like "application/json" |\n| fileName | <code>String</code> | the full file name like "myKey.json" |\n\n### uploadText(event, callback)\n  Upload and parse JSON keypair\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| event | <code>Event</code> | `$event` from the `@change` handler |\n| callback | <code>function</code> | a function to handle the loaded file from the reader |\n\n### usePictureUpload(Options) \u21D2 <code>PictureUploadData</code>\n  Process an uploaded picture by rendering in into a canvas with given size. Returns a base64 encoded image to be stored and displayed as `img.src`\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| Options | <code>PictureUploadOptions</code> | uploader options |\n\n**Example**  \n```js\nconst src = ref(null)\n\nconst {state, handleUpload} = usePictureUpload({\n preserveRatio: true,\n})\n\nwatch(()=>state.output, file => src.value = file.content)\n```\n### PictureUploadOptions : <code>Object</code>\n  **Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| preserveRatio | <code>Boolean</code> | should we preserve the original picture aspect ratio? Default: `false` |\n| picSize | <code>Number</code> | width of the rendered picture |\n| maxSize | <code>Number</code> | maximum size of an uploaded picture |\n\n### PictureUploadData : <code>Object</code>\n  **Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| state | <code>reactive</code> | a reactive object with the state of the upload |\n| handleUpload | <code>function</code> | handler function to use with `@change="handleUpload"` on an `<input type="file">` element |\n\n<hr />\n\n<a name="module_useMd"></a>\n\n## useMd\nHandle Markdown files\n\n\n* [useMd](#module_useMd)\n    * _static_\n        * [.createMd(md)](#module_useMd.createMd) \u21D2\n        * [.parseMd(file)](#module_useMd.parseMd) \u21D2 <code>Md</code>\n    * _inner_\n        * [~Md](#module_useMd..Md) : <code>Object</code>\n\n### createMd(md) \u21D2\n  Create markdown with frontmatter\n\n**Returns**: Markdown text file ready to download  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| md | <code>Md</code> | frontmatter,content |\n\n### parseMd(file) \u21D2 <code>Md</code>\n  Parse text content of a markdown file into an object\n\n**Returns**: <code>Md</code> - - An object with md frontmatter and content  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| file | <code>String</code> | Text form of an uploaded file |\n\n### Md : <code>Object</code>\n  **Properties**\n\n| Name | Type |\n| --- | --- |\n| frontmatter | <code>Object</code> | \n| content | <code>object</code> | \n\n<hr />\n\n<a name="module_useZip"></a>\n\n## useZip\nRead and write zip files\n\n**See**: https://github.com/Stuk/jszip  \n\n* [useZip](#module_useZip)\n    * _static_\n        * [.useZip()](#module_useZip.useZip) \u21D2 <code>useZip</code>\n            * [~addFile(options)](#module_useZip.useZip..addFile) \u21D2 <code>String</code>\n            * [~zipPost(post)](#module_useZip.useZip..zipPost)\n    * _inner_\n        * [~useZip](#module_useZip..useZip)\n\n### useZip() \u21D2 <code>useZip</code>\n  Zip file creation toolbox\n\n**Example**  \n```js\nimport {useZip} from \'@gun-vue/composables\'\nconst { zip, zipPost, addMd, addFile, downloadZip } = useZip()\n```\n\n* [.useZip()](#module_useZip.useZip) \u21D2 <code>useZip</code>\n    * [~addFile(options)](#module_useZip.useZip..addFile) \u21D2 <code>String</code>\n    * [~zipPost(post)](#module_useZip.useZip..zipPost)\n\n<a name="module_useZip.useZip..addFile"></a>\n\n#### addFile(options) \u21D2 <code>String</code>\nAdd a binary file to the zip\n\n**Kind**: inner method of [<code>useZip</code>](#module_useZip.useZip)  \n**Returns**: <code>String</code> - the resulting filename  \n\n| Param | Type |\n| --- | --- |\n| options | <code>Object</code> | \n\n**Example**  \n```js\nif (post.cover) { // a base64 encoded picture\n  const fileName = await addFile({\n    title: "cover",\n    file: post.cover,\n    folder: post.title,\n  });\n  post.cover = fileName;\n}\n```\n<a name="module_useZip.useZip..zipPost"></a>\n\n#### zipPost(post)\nZips the whole post object\n\n**Kind**: inner method of [<code>useZip</code>](#module_useZip.useZip)  \n\n| Param | Type |\n| --- | --- |\n| post | <code>Object</code> | \n\n### useZip\n  **Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| zip | <code>JSZip</code> | a JSZip instance |\n| zipPost | <code>function</code> | treats a post with md contents and cover and icon images and adds them to the zip |\n| addMd | <code>function</code> | add a MD file to the zip |\n| addFile | <code>function</code> | add a binary file to the zip |\n| downloadZip | <code>function</code> | initiate the download of the zip file |\n\n<hr />\n\n<a name="module_useGun"></a>\n\n## useGun\nGun DB initialization and basic methods\n\n\n* [useGun](#module_useGun)\n    * _static_\n        * [.gun](#module_useGun.gun)\n        * [.gun2](#module_useGun.gun2)\n        * [.useGun(options)](#module_useGun.useGun) \u21D2 <code>Gun</code>\n        * [.useGun2(options)](#module_useGun.useGun2) \u21D2 <code>Gun</code>\n    * _inner_\n        * [~SEA](#module_useGun..SEA)\n        * [~soul()](#module_useGun..soul)\n        * [~genUUID()](#module_useGun..genUUID)\n\n### gun\n  The main Gun instance for database operations\n\n### gun2\n  Secondary Gun instance for key management\n\n### useGun(options) \u21D2 <code>Gun</code>\n  Instantiate a Gun instance for DB manipulations\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | options fot this gun instance, like { localstorage:true } |\n\n**Example**  \n```js\nimport { useGun } from \'@gun-vue/composables\'\n\nconst gun = useGun()\n```\n### useGun2(options) \u21D2 <code>Gun</code>\n  get a secondary Gun instance for certificate management\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>object</code> | options fot this gun instance, like { localstorage:true } |\n\n### SEA\n  SEA library\n\n### soul()\n  **Get a soul for any given node**\nA wrapper for `Gun.node.soul`\n\n### genUUID()\n  **Generate a random UUID**\nA wrapper for `Gun.text.random`\n\n<hr />\n\n<a name="module_useRelay"></a>\n\n## useRelay\nRelay connection management\n\n\n* [useRelay](#module_useRelay)\n    * _static_\n        * [.useRelay()](#module_useRelay.useRelay) \u21D2 <code>useRelay</code>\n    * _inner_\n        * [~Relay](#module_useRelay..Relay) : <code>reactive</code>\n\n### useRelay() \u21D2 <code>useRelay</code>\n  Peer server status monitor\n\n**Example**  \n```js\nimport { useRelay } from \'@gun-vue/composables\';\n\nconst { relay, setPeer, resetPeer } = useRelay()\n```\n### Relay : <code>reactive</code>\n  Peer server status reactive object\n\n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| host | <code>String</code> | the current peer server URL |\n| status | <code>String</code> | current connection status |\n| started | <code>Number</code> | the timestamp of server started current session |\n| pulse | <code>Number</code> | last received timestamp |\n| lag | <code>Number</code> | drift of the timestamp in ms |\n| diff | <code>Number</code> | age of the session in ms |\n| age | <code>String</code> | age of the session in human readable format |\n| blink | <code>Boolean</code> | a Boolean toggled every time the new pulse comes to drive animations |\n\n**Example**  \n```js\n{\n"peer": "https://etogun.glitch.me/gun",\n"host": "6db1edbb5aae",\n"status": "running",\n"started": 1642666725795,\n"pulse": 1642677007483,\n"lag": 8,\n"diff": 10281688,\n"age": "3h",\n"delay": 22,\n"blink": true\n}\n```\n<hr />\n\n<a name="module_useRelays"></a>\n\n## useRelays\nLoads the [list of active volunteer DHT gun nodes](https://github.com/amark/gun/wiki/volunteer.dht)  and benchmarks ping for them\n\n\n* [useRelays](#module_useRelays)\n    * _static_\n        * [.loadRelays(loadRelaysOptions)](#module_useRelays.loadRelays) \u21D2 <code>relays</code>\n        * [.useRelays()](#module_useRelays.useRelays) \u21D2 <code>useRelays</code>\n    * _inner_\n        * [~useRelays](#module_useRelays..useRelays) : <code>Object</code>\n        * [~loadRelaysOptions](#module_useRelays..loadRelaysOptions) : <code>Object</code>\n        * [~Relays](#module_useRelays..Relays) : <code>Array.&lt;Object&gt;</code>\n\n### loadRelays(loadRelaysOptions) \u21D2 <code>relays</code>\n  Load the list of the relays\n\n\n| Param | Type |\n| --- | --- |\n| loadRelaysOptions | <code>Object</code> | \n\n### useRelays() \u21D2 <code>useRelays</code>\n  Gets the list of actual gun relays and tool to update the list\n\n**Example**  \n```js\nimport { useRelays } from \'@gun-vue/composables\'\nconst { relays, errors, loadRelays } = useRelays()\n```\n### useRelays : <code>Object</code>\n  **Properties**\n\n| Name | Type |\n| --- | --- |\n| Relays | <code>Object</code> | \n| Errors | <code>Object</code> | \n| loadRelays | <code>function</code> | \n\n### loadRelaysOptions : <code>Object</code>\n  **Properties**\n\n| Name | Type |\n| --- | --- |\n| source | <code>String</code> | \n\n### Relays : <code>Array.&lt;Object&gt;</code>\n  **Properties**\n\n| Name | Type |\n| --- | --- |\n| hostname | <code>String</code> | \n| url | <code>String</code> | \n| ping | <code>Number</code> | \n\n<hr />\n\n<a name="module_useLog"></a>\n\n## useLog\nReactive version of `gun-util` Date tree\n\n<hr />\n\n<a name="module_useWorker"></a>\n\n## useWorker\nWorker wrapper for heavy functions\n\n\n* [useWorker](#module_useWorker)\n    * [.newWorker](#module_useWorker.newWorker)\n    * [.sortByDate(e)](#module_useWorker.sortByDate)\n\n### newWorker\n  Create a new worker for a function\nIt should contain a `postMessage` method to reply to any incoming `postMessage` from the main script\n\n\n| Param | Type |\n| --- | --- |\n| funcObj | <code>function</code> | \n\n### sortByDate(e)\n  Example sorter function for a dated list object\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| e | <code>Object</code> | the worker post event with a `data` object with a list of records to sort by the date keys |\n\n<hr />\n\n<a name="module_usePost"></a>\n\n## usePost\nGet and handle a particular post by it\'s tag and hash\n\n\n* [usePost](#module_usePost)\n    * _static_\n        * [.usePost(options)](#module_usePost.usePost) \u21D2 <code>Post</code>\n        * [.addPost(tag, post)](#module_usePost.addPost)\n        * [.downloadPost(post)](#module_usePost.downloadPost)\n        * [.parsePost(data)](#module_usePost.parsePost) \u21D2 <code>Object</code>\n        * [.usePostTimestamp()](#module_usePost.usePostTimestamp) \u21D2\n    * _inner_\n        * [~Post](#module_usePost..Post) : <code>Object</code>\n\n### usePost(options) \u21D2 <code>Post</code>\n  An interface to manage a post\n\n\n| Param | Type |\n| --- | --- |\n| options | <code>Object</code> | \n\n**Example**  \n```js\nconst post = usePost({ tag: \'tag\', hash: postHash })\n```\n### addPost(tag, post)\n  Add a new post to a tag\n\n\n| Param | Type |\n| --- | --- |\n| tag | <code>String</code> | \n| post | <code>Object</code> | \n\n**Example**  \n```js\nimport { addPost } from \'@gun-vue/composables\'\n\naddPost(\'MyTag\', {\n title: \'New post\'\n})\n```\n### downloadPost(post)\n  Download the post as a zip file with MD contents and icon and cover pictures if present\n\n\n| Param | Type |\n| --- | --- |\n| post | <code>Post</code> | \n\n**Example**  \n```js\nimport { downloadPost, usePost } from \'@gun-vue/composables\'\n\nconst {post} = usePost( postTag, postHash )\n\ndownloadPost(post)\n```\n### parsePost(data) \u21D2 <code>Object</code>\n  Parse a post string from db\n\n**Returns**: <code>Object</code> - Post object  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| data | <code>String</code> | Stringified data from the hashed post |\n\n### usePostTimestamp() \u21D2\n  Get and update the timestamp of an immutable post\n\n**Returns**: - {timestamp, msTime, refresh}  \n\n| Param | Description |\n| --- | --- |\n|  | {tag, hash} |\n\n### Post : <code>Object</code>\n  **Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| empty | <code>Boolean</code> | whether the post has contents |\n| tag | <code>String</code> | the tag under which the post was published |\n| hash | <code>String</code> | the hash of the contents |\n| data | <code>Object</code> | the contents of the post |\n| download | <code>function</code> | use this function to download the post as a Markdown file |\n\n**Example**  \n```js\n{\n "empty": false,\n "tag": "ds",\n "hash": "C8trDBYNyvxVedHK4Q0IuUarc/k2/iiv8opPfoAU0xA=",\n "data": {\n   "cover": "data:image/png;base64,..........",\n   "icon": "data:image/png;base64,..........",\n   "title": "OSS",\n   "statement": "New live album by tsoop",\n   "youtube": "K2MwpOd8vEI",\n   "content": "It\'s mostly op-z + op-1 with my own Unity visuals based on [Chromatone](https://chromatone.center) system.\\n\\n### 2021\\nFirst played live at April 20th **2021**.\\n\\n### Into 2022\\nIt\'s an ongoing live album to be recorded throughout the **2022**."\n},\n "timestamp": 1642590655747,\n "lastUpdated": "1d"\n}\n```\n<hr />\n\n<a name="module_usePosts"></a>\n\n## usePosts\nGet and handle a particular post by it\'s tag and hash\n\n\n* [usePosts](#module_usePosts)\n    * _static_\n        * [.usePosts(tag, options)](#module_usePosts.usePosts) \u21D2 <code>usePosts</code>\n        * [.downloadFeed(tag, posts)](#module_usePosts.downloadFeed)\n        * [.uploadFeed(tag, files)](#module_usePosts.uploadFeed)\n    * _inner_\n        * [~usePosts](#module_usePosts..usePosts)\n\n### usePosts(tag, options) \u21D2 <code>usePosts</code>\n  Use a list of immutable data from a #tag\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| tag | <code>String</code> | A vue ref to watch - generated from props by `toRef(props,\'tag\')` |\n| options | <code>Object</code> | Options for the feed |\n\n**Example**  \n```js\nimport { usePosts } from \'@gun-vue/composables\'\n\nconst { posts, timestamps, count, uploadPosts, downloadPosts} = usePosts(\'MyTag\')\n```\n### downloadFeed(tag, posts)\n  Export a list of posts as a zip file\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| tag | <code>String</code> | Name of the tag |\n| posts | <code>Object</code> | Posts to export |\n\n**Example**  \n```js\nimport {downloadFeed} from \'@gun-vue/components\'\n\ndownloadFeed(\'myTag\',posts)\n```\n### uploadFeed(tag, files)\n  Upload zip files and add all the MD files from it to the tag\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| tag | <code>String</code> | a tag to add the posts to |\n| files | <code>FileList</code> | File list from the input `@change` event |\n\n**Example**  \n```js\nimport { uploadFeed } from \'@gun-vue/composables\'\n```\n**Example**  \n```html\n<input type="file" @change="uploadFeed( \'myTag\', $event.target.files )" />\n```\n### usePosts\n  **Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| posts | <code>ref</code> | the reactive list of hashed data |\n| timestamps | <code>ref</code> | reactive timestamps list for all posts in a list |\n| count | <code>computed</code> | the number of posts in a feed |\n| downloadPosts | <code>function</code> | Download all posts in a zip file |\n| uploadPosts | <code>function</code> | upload a zip file with posts |\n\n<hr />\n\n<a name="module_useReaction"></a>\n\n## useReaction\nReact to posts with emojis\n\n<hr />\n\n<a name="module_useReactions"></a>\n\n## useReactions\nReactions to posts with emojis\n\n<hr />\n\n<a name="module_useTags"></a>\n\n## useTags\nGet and handle a particular post by it\'s tag and hash\n\n\n* [useTags](#module_useTags)\n    * _static_\n        * [.useTagList()](#module_useTags.useTagList) \u21D2 <code>useTagList</code>\n    * _inner_\n        * [~useTagList](#module_useTags..useTagList)\n\n### useTagList() \u21D2 <code>useTagList</code>\n  Toolkit to deal with the available tags\n\n### useTagList\n  **Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| search | <code>ref</code> | a ref to bind to an input element |\n| slug | <code>computed</code> | a slugified search query - url safe verion to be used as a tag |\n| tags | <code>Tags</code> | the object to handle all the tags |\n| addTag | <code>function</code> | add a slug tag to the list |\n\n<hr />\n\n<a name="module_Projects"></a>\n\n## Projects\n<hr />\n\n<a name="module_useRoom"></a>\n\n## useRoom\n\n* [useRoom](#module_useRoom)\n    * [.useRoom()](#module_useRoom.useRoom) \u21D2 <code>useRoom</code>\n    * [.updateRoomProfile(field, content)](#module_useRoom.updateRoomProfile)\n    * [.createRoom()](#module_useRoom.createRoom)\n    * [.enterRoom(pub)](#module_useRoom.enterRoom)\n    * [.leaveRoom()](#module_useRoom.leaveRoom)\n\n### useRoom() \u21D2 <code>useRoom</code>\n  Reactive room controls\n\n### updateRoomProfile(field, content)\n  Update a profile field of a room\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| field | <code>String</code> | parameter to write to |\n| content | <code>String</code> |  |\n\n### createRoom()\n  Create a new room inside the current room\n\n### enterRoom(pub)\n  The right way to come inside a room\n\n\n| Param | Type |\n| --- | --- |\n| pub | <code>String</code> | \n\n### leaveRoom()\n  Leave the room\n\n<hr />\n\n<a name="module_useSpace"></a>\n\n## useSpace\nA 2D-space\n\n\n* [useSpace](#module_useSpace)\n    * _static_\n        * [.useSpace()](#module_useSpace.useSpace) \u21D2 <code>useSpace</code>\n    * _inner_\n        * [~useSpace](#module_useSpace..useSpace) : <code>Object</code>\n\n### useSpace() \u21D2 <code>useSpace</code>\n  A space to navigate with mouse clicks\n\n**Example**  \n```js\nconst { space, plane, links, width, height, guests, area, join } = useSpace({\nTIMEOUT: 10000,\n})\n```\n### useSpace : <code>Object</code>\n  **Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| space | <code>reactive</code> | The main object |\n| guests | <code>reactive</code> | Active guests |\n| links | <code>reactive</code> | Links between active guests |\n| plane | <code>ref</code> | The SVG element |\n| area | <code>ref</code> | The rect element for mouse events capture |\n| width | <code>ref</code> | Width of the plane |\n| height | <code>ref</code> | Height of the plane |\n| join | <code>function</code> | Join the space with the current user |\n\n<hr />\n\n<a name="module_useColor"></a>\n\n## useColor\nDeterministic colors derived from oub keys, hashes or any other string data\n\n### useColor(palette) \u21D2 <code>ColorHash</code>\n  Get a color generator of a certain palette\n\n**Returns**: <code>ColorHash</code> - Color-Hash instance  \n**See**: https://github.com/zenozeng/color-hash  \n\n| Param | Type |\n| --- | --- |\n| palette | <code>&#x27;light&#x27;</code> \\| <code>&#x27;regular&#x27;</code> \\| <code>&#x27;deep&#x27;</code> \\| <code>&#x27;dark&#x27;</code> | \n\n**Example**  \n```js\nimport {useColor} from \'@gun-vue/composables\'\nconst colorDeep = useColor(\'deep\')\nconst color = colorDeep.hex(\'any text data\')\n// color == \'#e052ae\'\n```\n<hr />\n\n<a name="module_useMouse"></a>\n\n## useMouse\nHandle mouse movement inside an SVG\n\n\n* [useMouse](#module_useMouse)\n    * _static_\n        * [.useSvgMouse()](#module_useMouse.useSvgMouse) \u21D2 <code>useMouse</code>\n    * _inner_\n        * [~useMouse](#module_useMouse..useMouse) : <code>Object</code>\n        * [~Mouse](#module_useMouse..Mouse) : <code>reactive</code>\n\n### useSvgMouse() \u21D2 <code>useMouse</code>\n  Correct mouse position in an SVG space\n\n### useMouse : <code>Object</code>\n  **Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| area | <code>ref</code> | an area to mount the mouse to |\n| mouse | <code>Mouse</code> | the reactive mouse parameters |\n\n### Mouse : <code>reactive</code>\n  **Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| x | <code>Number</code> | absolute X coordinate to place a marker to |\n| y | <code>Number</code> | absolute Y coordinate to place a marker to |\n| normX | <code>Number</code> | [0-1] relative X coordinate |\n| normY | <code>Number</code> | [0-1] relative Y coordinate |\n| pressed | <code>Boolean</code> | is mouse pressed? |\n| inside | <code>Boolean</code> | is mouse inside the area? |\n\n<hr />\n\n<a name="module_useMates"></a>\n\n## useMates\nConnections between accounts\n\n\n* [useMates](#module_useMates)\n    * _static_\n        * [.useMates(pub)](#module_useMates.useMates) \u21D2 <code>useMates</code>\n        * [.getFirstEmoji(text)](#module_useMates.getFirstEmoji) \u21D2 <code>String</code>\n        * [.isEmoji(text)](#module_useMates.isEmoji) \u21D2 <code>Boolean</code>\n        * [.useMate(pub)](#module_useMates.useMate) \u21D2 <code>useMate</code>\n    * _inner_\n        * [~useMates](#module_useMates..useMates) : <code>reactive</code>\n        * [~useMate](#module_useMates..useMate) : <code>Object</code>\n\n### useMates(pub) \u21D2 <code>useMates</code>\n  Get a reactive list of the user\'s mates\n\n\n| Param | Type |\n| --- | --- |\n| pub | <code>String</code> | \n\n### getFirstEmoji(text) \u21D2 <code>String</code>\n  Break the string into graphemes and return the first one if it\'s an emoji\n\n**Returns**: <code>String</code> - Emoji  \n\n| Param | Type |\n| --- | --- |\n| text | <code>String</code> | \n\n### isEmoji(text) \u21D2 <code>Boolean</code>\n  Check if the text has emojis\n\n\n| Param | Type |\n| --- | --- |\n| text | <code>String</code> | \n\n### useMate(pub) \u21D2 <code>useMate</code>\n  Make mates with some account by current user\n\n\n| Param | Type |\n| --- | --- |\n| pub | <code>String</code> | \n\n### useMates : <code>reactive</code>\n  ### useMate : <code>Object</code>\n  **Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| emoji | <code>ref</code> | change it in an input |\n| isMate | <code>ref</code> | reactive state of connection |\n| toggleMate | <code>function</code> | toggle the link with current `emoji` ref |\n\n<hr />\n\n<a name="module_usePass"></a>\n\n## usePass\nManage user\'s password and credentials\n\n\n* [usePass](#module_usePass)\n    * _static_\n        * [.usePass()](#module_usePass.usePass) \u21D2 <code>usePass</code>\n    * _inner_\n        * [~Pass](#module_usePass..Pass) : <code>reactive</code>\n        * [~usePass](#module_usePass..usePass) : <code>Object</code>\n\n### usePass() \u21D2 <code>usePass</code>\n  Manage password of a user\n\n### Pass : <code>reactive</code>\n  **Properties**\n\n| Name | Type |\n| --- | --- |\n| safe | <code>Object</code> | \n| dec | <code>Object</code> | \n\n### usePass : <code>Object</code>\n  **Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| pass | <code>Pass</code> | the reactive password object |\n| setPass | <code>function</code> |  |\n| logWithPass | <code>function</code> |  |\n\n<hr />\n\n<a name="module_useUser"></a>\n\n## useUser\nBasic user management\n\n\n* [useUser](#module_useUser)\n    * _static_\n        * [.useUser()](#module_useUser.useUser) \u21D2 <code>useUser</code>\n        * [.auth(pair)](#module_useUser.auth)\n        * [.leave()](#module_useUser.leave)\n        * [.addProfileField(name)](#module_useUser.addProfileField)\n        * [.updateProfile(field, data)](#module_useUser.updateProfile)\n        * [.isPair(pair)](#module_useUser.isPair) \u21D2 <code>Boolean</code>\n    * _inner_\n        * [~Account](#module_useUser..Account) : <code>Object</code>\n        * [~User](#module_useUser..User) : <code>Object</code>\n        * [~useUser](#module_useUser..useUser)\n\n### useUser() \u21D2 <code>useUser</code>\n  Get access to current logged in user\n\n**Example**  \n```js\nimport { useUser } from \'@gun-vue/composables\'\n\nconst { user, auth, leave } = useUser()\n```\n### auth(pair)\n  Authenticate with a SEA key pair\n\n\n| Param | Type |\n| --- | --- |\n| pair | <code>Object</code> | \n\n**Example**  \n```js\nimport { auth, SEA } from \'@gun-vue/composables\'\n\nasync function login() {\n   const pair = await SEA.pair()\n   auth(pair)\n}\n```\n### leave()\n  Log out the user\n\n**Example**  \n```js\nimport { leave } from \'@gun-vue/composables\'\n\nleave()\n```\n### addProfileField(name)\n  Add a field to the User profile\n\n\n| Param | Type |\n| --- | --- |\n| name | <code>String</code> | \n\n**Example**  \n```js\nimport { addProfileField } from \'@gun-vue/composables\'\n\naddProfileField( \'city\' )\n```\n### updateProfile(field, data)\n  Update a profile field\n\n\n| Param | Type |\n| --- | --- |\n| field | <code>String</code> | \n| data | <code>Any</code> | \n\n**Example**  \n```js\nimport { updateProfile } from \'@gun-vue/composables\'\n\nupdateProfile( \'city\', \'Moscow\' )\n```\n### isPair(pair) \u21D2 <code>Boolean</code>\n  Check if the object is a proper SEA pair\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| pair | <code>Object</code> | an object to check |\n\n### Account : <code>Object</code>\n  the user account interface\n\n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| pub | <code>ref</code> | The pub key used to build the account |\n| color | <code>computed</code> | The user account color derived from the pub key |\n| profile | <code>Object</code> | An object with all the `gun.user().get(\'profile\')` data |\n| pulse | <code>Number</code> | latest timestamp from the user. It\'s emitted every second. Offline timeout is set to 10 seconds. |\n| blink | <code>Boolean</code> | A boolean that toggles on every timestamp received |\n| lastSeen | <code>Sting</code> | Shows \'online\' if recent pulse is less then 10s ago or a human readable time string |\n| db | <code>gun</code> | `gun.user(pub)` ref to query any additional user data |\n\n**Example**  \n```js\n{\n"pub": "XnpLVDYZWdl1NNgo6BlD6e3-n3Fzi-ZzVrzbIgYCYHo.9-hHUHaWNaAE6tMp800MMzNtDLtjicS53915IrBu4uc",\n"color": "#f55c3d",\n"profile": {\n   "name": "Accord",\n   "Message": "Use your imagination!",\n   "Money": "$ 20000000000"\n},\n"pulse": 1642077216809,\n"lastSeen": "online",\n"blink": true\n}\n```\n### User : <code>Object</code>\n  An interface to the current gun user\n\n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| initiated | <code>Boolean</code> | `true` if useUser has been run at least once |\n| is | <code>Object</code> | Reactive `gun.user().is` |\n| pub | <code>String</code> | Current user public key |\n| color | <code>String</code> | a HEX color for the given pub |\n| pulse | <code>Number</code> | Last received pulse timestamp |\n| pulser | <code>Number</code> | An id for pulse `setInterval` |\n| blink | <code>Boolean</code> | Toggles with every pulse received |\n| db | <code>Object</code> | `gun.user()` reference |\n| safe | <code>Object</code> | safe account indicators |\n| pair | <code>function</code> | use `user.pair()` to get curent user key pair |\n\n**Example**  \n```js\n{ \n "initiated": true, \n "is": { \n   "pub": "XnpLVDYZWdl1NNgo6BlD6e3-n3Fzi-ZzVrzbIgYCYHo.9-hHUHaWNaAE6tMp800MMzNtDLtjicS53915IrBu4uc", \n   "epub": "wAvPlMAg4jvUvK4sPpVyF1CAWnRCMu1YpHnoDrVDg-o.l79QDmdPCLEiO0F_WkB3zYLpJt-lANtyhNmHSM4bTes", \n   "alias": "XnpLVDYZWdl1NNgo6BlD6e3-n3Fzi-ZzVrzbIgYCYHo.9-hHUHaWNaAE6tMp800MMzNtDLtjicS53915IrBu4uc" \n }, \n "name": "Accord", \n "pub": "XnpLVDYZWdl1NNgo6BlD6e3-n3Fzi-ZzVrzbIgYCYHo.9-hHUHaWNaAE6tMp800MMzNtDLtjicS53915IrBu4uc", \n "color": "#f55c3d", \n "pulse": 1642708061615, \n "pulser": 12, \n "blink": false, \n "safe": { \n   "saved": true, \n   "password": null, \n   "enc": "SEA{\\"ct\\":\\"E+6GViU9dTuidruOCNAoBITE+AlGNRgiABplSbL5fh4v1P+fhF33MuBwKd3ssBNi2kJ1sCzvS/YLmzivECA5ARZPGVbgXTSj8AE9kCz0Ac/8ushlsfBNdt8s3+a3OPVxMIevnT01uqcgr75Zp4TugIg/YuB5WltA9RHsgWEMlo+X+tRGaqG5rfw4sAmTSV0P8evMgM9rN/Un5t/WeDbvIPNXqZEmtxwAhMUZwOJWZckNZmNwpxnelFO0BwmauWfzkXuqGeSxNhMeaZi+VoRDMUvTjT68DLBnVoOhFhcdco+RW8AJfktZHZ4GF2IzFnQmTGpUd2LfvIY/Yn1eNJH7iQ5w41ChiYB/zhgQCOc5ur51PV6swAuN595vUNn7+0J1JRSNGzW2V/4j4YR4IEsAoqOtdn2Y21ga/CFdrE0=\\",\\"iv\\":\\"LtODTV+LBzhWHqUcptUO\\",\\"s\\":\\"XCL9Uj1YlPcV\\"}", \n "pass": "SEA{\\"ct\\":\\"8wNClMx/ebfou+gGWdf+bbx0TAgc9RU=\\",\\"iv\\":\\"NPgHkI+Ke+i/mw+3chlr\\",\\"s\\":\\"3VzGv06Y4fQ+\\"}" \n } \n}\n```\n### useUser\n  **Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| user | <code>User</code> | the user interface |\n| auth | <code>function</code> | auth with a pair |\n| leave | <code>function</code> | log out |\n\n<hr />\n\n</docs>\n\n<style scoped>\n  hr {\n    height: 1px;\n    background-color: #3333;\n    margin: 2em 0 8em 0;\n  }\n\n  h3 {\n    margin-top: 3em;\n  }\n</style>';
export {
  __resolved__virtual_storySource_srcDocsComposablesStoryVue as default
};
