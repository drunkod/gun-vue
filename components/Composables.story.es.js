import { resolveComponent$1 as resolveComponent, createBlock$1 as createBlock, openBlock$1 as openBlock } from "./vendor.es.js";
import { _export_sfc } from "./_plugin-vue_export-helper.es.js";
const Composables_story_vue_vue_type_style_index_0_scoped_e5b27f19_lang = "";
const block0 = (Comp) => {
  Comp.doc = '<h1 id="gun-db-vue-ui-composables-collection" tabindex="-1">Gun DB + Vue UI composables collection <a class="header-anchor" href="#gun-db-vue-ui-composables-collection" aria-hidden="true">#</a></h1>\n<p>A Composition API `use` functions set for Gun.js and Vue 3 reactivity system</p>\n<p><img src="https://raw.githubusercontent.com/DeFUCC/gun-vue/master/docs/public/media/svg/composables.svg" alt="@gun-vue logo"></p>\n<p><a href="https://gun-vue.js.org" target="_blank">gun-vue.js.org</a></p>\n<p>It\'s just the beginning and not all the functions are reliably implemented yet. So you\'re welcome to collaborate on existing and new features of the library.</p>\n<ul>\n<li><strong>User</strong> - the `gun.user()` system management</li>\n<li><strong>Account</strong> - user profile interface</li>\n<li><strong>Color</strong> - the `color-hash` interface to generate colors for hashes and pubs</li>\n<li><strong>Crypto</strong> - the main cryptographic primitives like e2e encrypted messaging and more</li>\n<li><strong>Date Tree</strong> - the very performant concept of Date Tree graphs from <a href="https://github.com/diatche/gun-util#DateTree" target="_blank">gun-util</a> made reactive and easy to use</li>\n<li><strong>File</strong> - some bindings to manage file uploads and downloads</li>\n<li><strong>Hash</strong> - everything you need to hash data and work with the hashes in a reliable way (i.e. URL-safe conversion)</li>\n<li><strong>Mouse</strong> - some basic bindings to reliably locate mouse pointer in an SVG - may be useful for many online games</li>\n<li><strong>Password</strong> - some elaborations on reimagining password system in a p2p graph environment</li>\n<li><strong>Relay</strong> - Gun relay peer connection monitoring</li>\n<li><strong>Room</strong> - private signed collaborative spaces with a certificate system for access management. (TBD)</li>\n<li><strong>Space</strong> - a simple demo of showing working with private user data in a shared space</li>\n<li><strong>Posts</strong> - hashed immutable data in the root of the db as a fun experiment, but with deep observations about freedom of speach and ways to explore the vastness of the public graph space available with Gun</li>\n<li><strong>Chat</strong> - basic public chat</li>\n<li><strong>Rooms</strong> - cryptographic data collections</li>\n<li><strong>Dictionary</strong> - we find ourselves in great power if we have verified concepts to collaborate with</li>\n</ul>\n<p>... and more!</p>\n<p><strong>And there\'s more!</strong></p>\n<p><a href="https://gun-vue.js.org/docs" target="_blank">READ FULL DOCUMENTATION ONLINE</a></p>\n<h2 id="how-to-use" tabindex="-1">How to use <a class="header-anchor" href="#how-to-use" aria-hidden="true">#</a></h2>\n<ol>\n<li>Install the library:</li>\n</ol>\n<p>```shell<br>\nnpm i @gun-vue/composables<br>\n```</p>\n<ol start="2">\n<li>Import any of the functions you need:</li>\n</ol>\n<p>```js<br>\nimport { useAccount } from &quot;@gun-vue/composables&quot;;<br>\n```</p>\n<ol start="3">\n<li>Instantiate the function inside your Vue SFC</li>\n</ol>\n<p>```js<br>\nconst { account, auth, leave } = useAccount();<br>\n```</p>\n<ol start="4">\n<li>Use the reactive state in your template to drive the component:</li>\n</ol>\n<p>```html<br>\n&lt;div v-for=&quot;(data,field) in account.profile&quot; :key=&quot;field&quot;&gt;<br>\n{{ field }} - {{ data }}<br>\n&lt;/div&gt;<br>\n```</p>\n<h4 id="ssg-environment-notice-nuxt-vitepress-etc" tabindex="-1">SSG environment notice (Nuxt, Vitepress etc.) <a class="header-anchor" href="#ssg-environment-notice-nuxt-vitepress-etc" aria-hidden="true">#</a></h4>\n<p>Gun-Vue is client-side only and it may throw errors being executed during the SSG/SSR build process. One way to deal with it is to make the your GUN-enabled components asynchronous.</p>\n<h3 id="_1-make-your-component-async" tabindex="-1">1. Make your component async <a class="header-anchor" href="#_1-make-your-component-async" aria-hidden="true">#</a></h3>\n<p>```vue<br>\n&lt;script setup async&gt;<br>\nconst { useAccount } = await import(&quot;@gun-vue/composables&quot;);</p>\n<pre><code>const { account } &amp;#x3D; useAccount();\n</code></pre>\n<p>&lt;/script&gt;</p>\n<p>&lt;template&gt;<br>\n&lt;div&gt;{{ account.profile?.name }}&lt;/div&gt;<br>\n&lt;/template&gt;<br>\n```</p>\n<h3 id="_2-put-it-to-load-only-on-client-side" tabindex="-1">2. Put it to load only on client side. <a class="header-anchor" href="#_2-put-it-to-load-only-on-client-side" aria-hidden="true">#</a></h3>\n<p>```html<br>\n&lt;ClientOnly&gt;<br>\n&lt;Suspense&gt;<br>\n&lt;YourComponent /&gt;<br>\n&lt;/Suspense&gt;<br>\n&lt;/ClientOnly&gt;<br>\n```</p>\n<p>This should prevent any Gun-Vue related code from running during build stage.</p>\n<ul>\n<li>[ ] Refactor the code to be more useable and tree-shakeable in SSG environment. Help needed!</li>\n</ul>\n<pre><code><div class="htw-relative htw-not-prose __histoire-code"><div class="htw-absolute htw-top-0 htw-right-0 htw-text-xs htw-text-white/40"></div><pre class="shiki" style="background-color: #0d1117"><code><span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## Modules</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;table&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  &lt;thead&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">      &lt;th&gt;Module&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  &lt;/thead&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  &lt;tbody&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;a href=&quot;#useaccount&quot; &gt;useAccount&lt;/a&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;p&gt;Basic user management&lt;/p&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;a href=&quot;#usechat&quot; &gt;useChat&lt;/a&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;p&gt;Basic public chat&lt;/p&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;a href=&quot;#useprivatechat&quot; &gt;usePrivateChat&lt;/a&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;p&gt;Basic private chat&lt;/p&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;a href=&quot;#usecrypto&quot; &gt;useCrypto&lt;/a&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;p&gt;SEA cryptography abstraction&lt;/p&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;a href=&quot;#usedictionary&quot; &gt;useDictionary&lt;/a&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;a href=&quot;#usefile&quot; &gt;useFile&lt;/a&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;p&gt;File handling functions&lt;/p&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;a href=&quot;#usemd&quot; &gt;useMd&lt;/a&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;p&gt;Handle Markdown files&lt;/p&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;a href=&quot;#usezip&quot; &gt;useZip&lt;/a&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;p&gt;Read and write zip files&lt;/p&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;a href=&quot;#usegun&quot; &gt;useGun&lt;/a&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;p&gt;Gun DB initialization and basic methods&lt;/p&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;a href=&quot;#userelay&quot; &gt;useRelay&lt;/a&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;p&gt;Relay connection management&lt;/p&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;a href=&quot;#userelays&quot; &gt;useRelays&lt;/a&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;p&gt;Loads the &lt;a href=&quot;https://github.com/amark/gun/wiki/volunteer.dht&quot;&gt;list of active volunteer DHT gun nodes&lt;/a&gt;  and benchmarks ping for them&lt;/p&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;a href=&quot;#useworker&quot; &gt;useWorker&lt;/a&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;p&gt;Worker wrapper for heavy functions&lt;/p&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;a href=&quot;#usepost&quot; &gt;usePost&lt;/a&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;p&gt;Get and handle a particular post by it&amp;#39;s tag and hash&lt;/p&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;a href=&quot;#useposts&quot; &gt;usePosts&lt;/a&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;p&gt;Get and handle a particular post by it&amp;#39;s tag and hash&lt;/p&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;a href=&quot;#usereaction&quot; &gt;useReaction&lt;/a&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;p&gt;React to posts with emojis&lt;/p&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;a href=&quot;#usereactions&quot; &gt;useReactions&lt;/a&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;p&gt;Reactions to posts with emojis&lt;/p&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;a href=&quot;#usetags&quot; &gt;useTags&lt;/a&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;p&gt;Get and handle a particular post by it&amp;#39;s tag and hash&lt;/p&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;a href=&quot;#projects&quot; &gt;Projects&lt;/a&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;a href=&quot;#useroom&quot; &gt;useRoom&lt;/a&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;a href=&quot;#usespace&quot; &gt;useSpace&lt;/a&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;p&gt;A 2D-space&lt;/p&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;a href=&quot;#usecolor&quot; &gt;useColor&lt;/a&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;p&gt;Deterministic colors derived from oub keys, hashes or any other string data&lt;/p&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;a href=&quot;#usemouse&quot; &gt;useMouse&lt;/a&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;p&gt;Handle mouse movement inside an SVG&lt;/p&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;a href=&quot;#usemates&quot; &gt;useMates&lt;/a&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;p&gt;Connections between accounts&lt;/p&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;a href=&quot;#usepass&quot; &gt;usePass&lt;/a&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;p&gt;Manage user&amp;#39;s password and credentials&lt;/p&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;a href=&quot;#useuser&quot; &gt;useUser&lt;/a&gt;&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;td&gt;&lt;p&gt;Basic user management&lt;/p&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;/td&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    &lt;/tr&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;/tbody&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;/table&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_useAccount&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## useAccount</span></span>\n<span class="line"><span style="color: #c9d1d9">Basic user management</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">* [useAccount](#module_useAccount)</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _static_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.useAccount(pub)](#module_useAccount.useAccount) \u21D2 &lt;code&gt;account&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _inner_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~account](#module_useAccount..account) : &lt;code&gt;computed(object)&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### useAccount(pub) \u21D2 &lt;code&gt;account&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Load and handle user&#39;s account by a public key</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| pub | &lt;code&gt;ref(string)&lt;/code&gt; \\| &lt;code&gt;string&lt;/code&gt; | The public key of a user as a string or a ref |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Example**  </span></span>\n<span class="line"><span style="color: #c9d1d9">```js</span></span>\n<span class="line"><span style="color: #c9d1d9">import { ref } from &#39;vue&#39;</span></span>\n<span class="line"><span style="color: #c9d1d9">import { useAccount, SEA } from &#39;@gun-vue/composables&#39;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">const pub = ref()</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">async function generatePair() {</span></span>\n<span class="line"><span style="color: #c9d1d9"> pub.value = await SEA.pair()</span></span>\n<span class="line"><span style="color: #c9d1d9">}</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">const { account } = useAccount(pub)</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">generatePair()</span></span>\n<span class="line"><span style="color: #c9d1d9">```</span></span>\n<span class="line"><span style="color: #c9d1d9">### account : &lt;code&gt;computed(object)&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Reactive account data</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Properties**</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Name | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| pub | &lt;code&gt;string&lt;/code&gt; | the pub key |</span></span>\n<span class="line"><span style="color: #c9d1d9">| color | &lt;code&gt;string&lt;/code&gt; | the color hash of the pub key |</span></span>\n<span class="line"><span style="color: #c9d1d9">| profile | &lt;code&gt;object&lt;/code&gt; | all the profile fields of the account |</span></span>\n<span class="line"><span style="color: #c9d1d9">| pulse | &lt;code&gt;number&lt;/code&gt; | the recent presence timestamp |</span></span>\n<span class="line"><span style="color: #c9d1d9">| blink | &lt;code&gt;boolean&lt;/code&gt; | on/off switching pulse |</span></span>\n<span class="line"><span style="color: #c9d1d9">| lastSeen | &lt;code&gt;&amp;#x27;online&amp;#x27;&lt;/code&gt; \\| &lt;code&gt;string&lt;/code&gt; | a human readable last seen status (&#39;online&#39; if less than TIMEOUT) |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;hr /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_useChat&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## useChat</span></span>\n<span class="line"><span style="color: #c9d1d9">Basic public chat</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;hr /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_usePrivateChat&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## usePrivateChat</span></span>\n<span class="line"><span style="color: #c9d1d9">Basic private chat</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;hr /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_useCrypto&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## useCrypto</span></span>\n<span class="line"><span style="color: #c9d1d9">SEA cryptography abstraction</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">* [useCrypto](#module_useCrypto)</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _static_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.encFor(data, sender, receiver)](#module_useCrypto.encFor) \u21D2 &lt;code&gt;String&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.decFrom(data, sender, receiver)](#module_useCrypto.decFrom) \u21D2 &lt;code&gt;String&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.getShortHash(text, seed)](#module_useCrypto.getShortHash) \u21D2 &lt;code&gt;String&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _inner_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~Entity](#module_useCrypto..Entity) : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### encFor(data, sender, receiver) \u21D2 &lt;code&gt;String&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Encrypt data for one receiver entity</span></span>\n<span class="line"><span style="color: #c9d1d9">1. Generates encryption secret using bob&#39;s epub and current user pair</span></span>\n<span class="line"><span style="color: #c9d1d9">2. Enctypts data with this secret</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Returns**: &lt;code&gt;String&lt;/code&gt; - Encrypted data string to be sent  </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| data | &lt;code&gt;String&lt;/code&gt; | Stringified data to be encrypted |</span></span>\n<span class="line"><span style="color: #c9d1d9">| sender | &lt;code&gt;Entity&lt;/code&gt; | An object with `pub` and `epub` strings - the user.is object of the reciever&#39;s account |</span></span>\n<span class="line"><span style="color: #c9d1d9">| receiver | &lt;code&gt;SEAPair&lt;/code&gt; | SEA Pair of the sender \u2013 `epriv` key will be used to encrypt the data |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### decFrom(data, sender, receiver) \u21D2 &lt;code&gt;String&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Decrypt a private message from an entity</span></span>\n<span class="line"><span style="color: #c9d1d9">1. Generates secret using senders `epub` and current user pair</span></span>\n<span class="line"><span style="color: #c9d1d9">2. Decrypts the data with this secret</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Returns**: &lt;code&gt;String&lt;/code&gt; - Decrypted data  </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| data | &lt;code&gt;String&lt;/code&gt; | Encrypted private data |</span></span>\n<span class="line"><span style="color: #c9d1d9">| sender | &lt;code&gt;Entity&lt;/code&gt; | An object with `pub` and `epub` strings - the user.is object of the sender&#39;s account |</span></span>\n<span class="line"><span style="color: #c9d1d9">| receiver | &lt;code&gt;SEAPair&lt;/code&gt; | SEA Pair of the receiver \u2013 `epriv` key will be used to encrypt the data |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### getShortHash(text, seed) \u21D2 &lt;code&gt;String&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Calculate a hex hash for any string data</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Returns**: &lt;code&gt;String&lt;/code&gt; - The hex encoded SHA-1 hash  </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| text | &lt;code&gt;String&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9">| seed | &lt;code&gt;String&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### Entity : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  **Properties**</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Name | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| pub | &lt;code&gt;String&lt;/code&gt; | the public key |</span></span>\n<span class="line"><span style="color: #c9d1d9">| epub | &lt;code&gt;String&lt;/code&gt; | the elliplic encryption epub |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;hr /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_useDictionary&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## useDictionary</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">* [useDictionary](#module_useDictionary)</span></span>\n<span class="line"><span style="color: #c9d1d9">    * [.useWords()](#module_useDictionary.useWords) \u21D2 &lt;code&gt;useWords&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    * [.useDefs()](#module_useDictionary.useDefs) \u21D2 &lt;code&gt;useDefs&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### useWords() \u21D2 &lt;code&gt;useWords&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Use filtrable words list</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### useDefs() \u21D2 &lt;code&gt;useDefs&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Dictionary definitions browser</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;hr /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_useFile&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## useFile</span></span>\n<span class="line"><span style="color: #c9d1d9">File handling functions</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">* [useFile](#module_useFile)</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _static_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.downloadFile(text, fileType, fileName)](#module_useFile.downloadFile)</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.uploadText(event, callback)](#module_useFile.uploadText)</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.usePictureUpload(Options)](#module_useFile.usePictureUpload) \u21D2 &lt;code&gt;PictureUploadData&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _inner_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~PictureUploadOptions](#module_useFile..PictureUploadOptions) : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~PictureUploadData](#module_useFile..PictureUploadData) : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### downloadFile(text, fileType, fileName)</span></span>\n<span class="line"><span style="color: #c9d1d9">  A method to download any text as a file</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| text | &lt;code&gt;String&lt;/code&gt; | the text to download |</span></span>\n<span class="line"><span style="color: #c9d1d9">| fileType | &lt;code&gt;String&lt;/code&gt; | the file type like &quot;application/json&quot; |</span></span>\n<span class="line"><span style="color: #c9d1d9">| fileName | &lt;code&gt;String&lt;/code&gt; | the full file name like &quot;myKey.json&quot; |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### uploadText(event, callback)</span></span>\n<span class="line"><span style="color: #c9d1d9">  Upload and parse JSON keypair</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| event | &lt;code&gt;Event&lt;/code&gt; | `$event` from the `@change` handler |</span></span>\n<span class="line"><span style="color: #c9d1d9">| callback | &lt;code&gt;function&lt;/code&gt; | a function to handle the loaded file from the reader |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### usePictureUpload(Options) \u21D2 &lt;code&gt;PictureUploadData&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Process an uploaded picture by rendering in into a canvas with given size. Returns a base64 encoded image to be stored and displayed as `img.src`</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| Options | &lt;code&gt;PictureUploadOptions&lt;/code&gt; | uploader options |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Example**  </span></span>\n<span class="line"><span style="color: #c9d1d9">```js</span></span>\n<span class="line"><span style="color: #c9d1d9">const src = ref(null)</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">const {state, handleUpload} = usePictureUpload({</span></span>\n<span class="line"><span style="color: #c9d1d9"> preserveRatio: true,</span></span>\n<span class="line"><span style="color: #c9d1d9">})</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">watch(()=&gt;state.output, file =&gt; src.value = file.content)</span></span>\n<span class="line"><span style="color: #c9d1d9">```</span></span>\n<span class="line"><span style="color: #c9d1d9">### PictureUploadOptions : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  **Properties**</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Name | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| preserveRatio | &lt;code&gt;Boolean&lt;/code&gt; | should we preserve the original picture aspect ratio? Default: `false` |</span></span>\n<span class="line"><span style="color: #c9d1d9">| picSize | &lt;code&gt;Number&lt;/code&gt; | width of the rendered picture |</span></span>\n<span class="line"><span style="color: #c9d1d9">| maxSize | &lt;code&gt;Number&lt;/code&gt; | maximum size of an uploaded picture |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### PictureUploadData : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  **Properties**</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Name | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| state | &lt;code&gt;reactive&lt;/code&gt; | a reactive object with the state of the upload |</span></span>\n<span class="line"><span style="color: #c9d1d9">| handleUpload | &lt;code&gt;function&lt;/code&gt; | handler function to use with `@change=&quot;handleUpload&quot;` on an `&lt;input type=&quot;file&quot;&gt;` element |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;hr /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_useMd&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## useMd</span></span>\n<span class="line"><span style="color: #c9d1d9">Handle Markdown files</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">* [useMd](#module_useMd)</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _static_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.createMd(md)](#module_useMd.createMd) \u21D2</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.parseMd(file)](#module_useMd.parseMd) \u21D2 &lt;code&gt;Md&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _inner_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~Md](#module_useMd..Md) : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### createMd(md) \u21D2</span></span>\n<span class="line"><span style="color: #c9d1d9">  Create markdown with frontmatter</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Returns**: Markdown text file ready to download  </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| md | &lt;code&gt;Md&lt;/code&gt; | frontmatter,content |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### parseMd(file) \u21D2 &lt;code&gt;Md&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Parse text content of a markdown file into an object</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Returns**: &lt;code&gt;Md&lt;/code&gt; - - An object with md frontmatter and content  </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| file | &lt;code&gt;String&lt;/code&gt; | Text form of an uploaded file |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### Md : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  **Properties**</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Name | Type |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| frontmatter | &lt;code&gt;Object&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9">| content | &lt;code&gt;object&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;hr /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_useZip&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## useZip</span></span>\n<span class="line"><span style="color: #c9d1d9">Read and write zip files</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**See**: https://github.com/Stuk/jszip  </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">* [useZip](#module_useZip)</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _static_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.useZip()](#module_useZip.useZip) \u21D2 &lt;code&gt;useZip&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">            * [~addFile(options)](#module_useZip.useZip..addFile) \u21D2 &lt;code&gt;String&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">            * [~zipPost(post)](#module_useZip.useZip..zipPost)</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _inner_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~useZip](#module_useZip..useZip)</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### useZip() \u21D2 &lt;code&gt;useZip&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Zip file creation toolbox</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Example**  </span></span>\n<span class="line"><span style="color: #c9d1d9">```js</span></span>\n<span class="line"><span style="color: #c9d1d9">import {useZip} from &#39;@gun-vue/composables&#39;</span></span>\n<span class="line"><span style="color: #c9d1d9">const { zip, zipPost, addMd, addFile, downloadZip } = useZip()</span></span>\n<span class="line"><span style="color: #c9d1d9">```</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">* [.useZip()](#module_useZip.useZip) \u21D2 &lt;code&gt;useZip&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    * [~addFile(options)](#module_useZip.useZip..addFile) \u21D2 &lt;code&gt;String&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    * [~zipPost(post)](#module_useZip.useZip..zipPost)</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_useZip.useZip..addFile&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">#### addFile(options) \u21D2 &lt;code&gt;String&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">Add a binary file to the zip</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Kind**: inner method of [&lt;code&gt;useZip&lt;/code&gt;](#module_useZip.useZip)  </span></span>\n<span class="line"><span style="color: #c9d1d9">**Returns**: &lt;code&gt;String&lt;/code&gt; - the resulting filename  </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| options | &lt;code&gt;Object&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Example**  </span></span>\n<span class="line"><span style="color: #c9d1d9">```js</span></span>\n<span class="line"><span style="color: #c9d1d9">if (post.cover) { // a base64 encoded picture</span></span>\n<span class="line"><span style="color: #c9d1d9">  const fileName = await addFile({</span></span>\n<span class="line"><span style="color: #c9d1d9">    title: &quot;cover&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">    file: post.cover,</span></span>\n<span class="line"><span style="color: #c9d1d9">    folder: post.title,</span></span>\n<span class="line"><span style="color: #c9d1d9">  });</span></span>\n<span class="line"><span style="color: #c9d1d9">  post.cover = fileName;</span></span>\n<span class="line"><span style="color: #c9d1d9">}</span></span>\n<span class="line"><span style="color: #c9d1d9">```</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_useZip.useZip..zipPost&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">#### zipPost(post)</span></span>\n<span class="line"><span style="color: #c9d1d9">Zips the whole post object</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Kind**: inner method of [&lt;code&gt;useZip&lt;/code&gt;](#module_useZip.useZip)  </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| post | &lt;code&gt;Object&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### useZip</span></span>\n<span class="line"><span style="color: #c9d1d9">  **Properties**</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Name | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| zip | &lt;code&gt;JSZip&lt;/code&gt; | a JSZip instance |</span></span>\n<span class="line"><span style="color: #c9d1d9">| zipPost | &lt;code&gt;function&lt;/code&gt; | treats a post with md contents and cover and icon images and adds them to the zip |</span></span>\n<span class="line"><span style="color: #c9d1d9">| addMd | &lt;code&gt;function&lt;/code&gt; | add a MD file to the zip |</span></span>\n<span class="line"><span style="color: #c9d1d9">| addFile | &lt;code&gt;function&lt;/code&gt; | add a binary file to the zip |</span></span>\n<span class="line"><span style="color: #c9d1d9">| downloadZip | &lt;code&gt;function&lt;/code&gt; | initiate the download of the zip file |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;hr /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_useGun&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## useGun</span></span>\n<span class="line"><span style="color: #c9d1d9">Gun DB initialization and basic methods</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">* [useGun](#module_useGun)</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _static_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.gun](#module_useGun.gun)</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.gun2](#module_useGun.gun2)</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.useGun(options)](#module_useGun.useGun) \u21D2 &lt;code&gt;Gun&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.useGun2(options)](#module_useGun.useGun2) \u21D2 &lt;code&gt;Gun&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _inner_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~SEA](#module_useGun..SEA)</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~soul()](#module_useGun..soul)</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~genUUID()](#module_useGun..genUUID)</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### gun</span></span>\n<span class="line"><span style="color: #c9d1d9">  The main Gun instance for database operations</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### gun2</span></span>\n<span class="line"><span style="color: #c9d1d9">  Secondary Gun instance for key management</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### useGun(options) \u21D2 &lt;code&gt;Gun&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Instantiate a Gun instance for DB manipulations</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| options | &lt;code&gt;Object&lt;/code&gt; | options fot this gun instance, like { localstorage:true } |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Example**  </span></span>\n<span class="line"><span style="color: #c9d1d9">```js</span></span>\n<span class="line"><span style="color: #c9d1d9">import { useGun } from &#39;@gun-vue/composables&#39;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">const gun = useGun()</span></span>\n<span class="line"><span style="color: #c9d1d9">```</span></span>\n<span class="line"><span style="color: #c9d1d9">### useGun2(options) \u21D2 &lt;code&gt;Gun&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  get a secondary Gun instance for certificate management</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| options | &lt;code&gt;object&lt;/code&gt; | options fot this gun instance, like { localstorage:true } |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### SEA</span></span>\n<span class="line"><span style="color: #c9d1d9">  SEA library</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### soul()</span></span>\n<span class="line"><span style="color: #c9d1d9">  **Get a soul for any given node**</span></span>\n<span class="line"><span style="color: #c9d1d9">A wrapper for `Gun.node.soul`</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### genUUID()</span></span>\n<span class="line"><span style="color: #c9d1d9">  **Generate a random UUID**</span></span>\n<span class="line"><span style="color: #c9d1d9">A wrapper for `Gun.text.random`</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;hr /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_useRelay&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## useRelay</span></span>\n<span class="line"><span style="color: #c9d1d9">Relay connection management</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">* [useRelay](#module_useRelay)</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _static_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.useRelay()](#module_useRelay.useRelay) \u21D2 &lt;code&gt;useRelay&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _inner_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~Relay](#module_useRelay..Relay) : &lt;code&gt;reactive&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### useRelay() \u21D2 &lt;code&gt;useRelay&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Peer server status monitor</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Example**  </span></span>\n<span class="line"><span style="color: #c9d1d9">```js</span></span>\n<span class="line"><span style="color: #c9d1d9">import { useRelay } from &#39;@gun-vue/composables&#39;;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">const { relay, setPeer, resetPeer } = useRelay()</span></span>\n<span class="line"><span style="color: #c9d1d9">```</span></span>\n<span class="line"><span style="color: #c9d1d9">### Relay : &lt;code&gt;reactive&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Peer server status reactive object</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Properties**</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Name | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| host | &lt;code&gt;String&lt;/code&gt; | the current peer server URL |</span></span>\n<span class="line"><span style="color: #c9d1d9">| status | &lt;code&gt;String&lt;/code&gt; | current connection status |</span></span>\n<span class="line"><span style="color: #c9d1d9">| started | &lt;code&gt;Number&lt;/code&gt; | the timestamp of server started current session |</span></span>\n<span class="line"><span style="color: #c9d1d9">| pulse | &lt;code&gt;Number&lt;/code&gt; | last received timestamp |</span></span>\n<span class="line"><span style="color: #c9d1d9">| lag | &lt;code&gt;Number&lt;/code&gt; | drift of the timestamp in ms |</span></span>\n<span class="line"><span style="color: #c9d1d9">| diff | &lt;code&gt;Number&lt;/code&gt; | age of the session in ms |</span></span>\n<span class="line"><span style="color: #c9d1d9">| age | &lt;code&gt;String&lt;/code&gt; | age of the session in human readable format |</span></span>\n<span class="line"><span style="color: #c9d1d9">| blink | &lt;code&gt;Boolean&lt;/code&gt; | a Boolean toggled every time the new pulse comes to drive animations |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Example**  </span></span>\n<span class="line"><span style="color: #c9d1d9">```js</span></span>\n<span class="line"><span style="color: #c9d1d9">{</span></span>\n<span class="line"><span style="color: #c9d1d9">&quot;peer&quot;: &quot;https://etogun.glitch.me/gun&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">&quot;host&quot;: &quot;6db1edbb5aae&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">&quot;status&quot;: &quot;running&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">&quot;started&quot;: 1642666725795,</span></span>\n<span class="line"><span style="color: #c9d1d9">&quot;pulse&quot;: 1642677007483,</span></span>\n<span class="line"><span style="color: #c9d1d9">&quot;lag&quot;: 8,</span></span>\n<span class="line"><span style="color: #c9d1d9">&quot;diff&quot;: 10281688,</span></span>\n<span class="line"><span style="color: #c9d1d9">&quot;age&quot;: &quot;3h&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">&quot;delay&quot;: 22,</span></span>\n<span class="line"><span style="color: #c9d1d9">&quot;blink&quot;: true</span></span>\n<span class="line"><span style="color: #c9d1d9">}</span></span>\n<span class="line"><span style="color: #c9d1d9">```</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;hr /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_useRelays&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## useRelays</span></span>\n<span class="line"><span style="color: #c9d1d9">Loads the [list of active volunteer DHT gun nodes](https://github.com/amark/gun/wiki/volunteer.dht)  and benchmarks ping for them</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">* [useRelays](#module_useRelays)</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _static_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.loadRelays(loadRelaysOptions)](#module_useRelays.loadRelays) \u21D2 &lt;code&gt;relays&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.useRelays()](#module_useRelays.useRelays) \u21D2 &lt;code&gt;useRelays&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _inner_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~useRelays](#module_useRelays..useRelays) : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~loadRelaysOptions](#module_useRelays..loadRelaysOptions) : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~Relays](#module_useRelays..Relays) : &lt;code&gt;Array.&amp;lt;Object&amp;gt;&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### loadRelays(loadRelaysOptions) \u21D2 &lt;code&gt;relays&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Load the list of the relays</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| loadRelaysOptions | &lt;code&gt;Object&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### useRelays() \u21D2 &lt;code&gt;useRelays&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Gets the list of actual gun relays and tool to update the list</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Example**  </span></span>\n<span class="line"><span style="color: #c9d1d9">```js</span></span>\n<span class="line"><span style="color: #c9d1d9">import { useRelays } from &#39;@gun-vue/composables&#39;</span></span>\n<span class="line"><span style="color: #c9d1d9">const { relays, errors, loadRelays } = useRelays()</span></span>\n<span class="line"><span style="color: #c9d1d9">```</span></span>\n<span class="line"><span style="color: #c9d1d9">### useRelays : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  **Properties**</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Name | Type |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| Relays | &lt;code&gt;Object&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9">| Errors | &lt;code&gt;Object&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9">| loadRelays | &lt;code&gt;function&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### loadRelaysOptions : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  **Properties**</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Name | Type |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| source | &lt;code&gt;String&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### Relays : &lt;code&gt;Array.&amp;lt;Object&amp;gt;&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  **Properties**</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Name | Type |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| hostname | &lt;code&gt;String&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9">| url | &lt;code&gt;String&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9">| ping | &lt;code&gt;Number&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;hr /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_useWorker&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## useWorker</span></span>\n<span class="line"><span style="color: #c9d1d9">Worker wrapper for heavy functions</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">* [useWorker](#module_useWorker)</span></span>\n<span class="line"><span style="color: #c9d1d9">    * [.newWorker](#module_useWorker.newWorker)</span></span>\n<span class="line"><span style="color: #c9d1d9">    * [.sortByDate(e)](#module_useWorker.sortByDate)</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### newWorker</span></span>\n<span class="line"><span style="color: #c9d1d9">  Create a new worker for a function</span></span>\n<span class="line"><span style="color: #c9d1d9">It should contain a `postMessage` method to reply to any incoming `postMessage` from the main script</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| funcObj | &lt;code&gt;function&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### sortByDate(e)</span></span>\n<span class="line"><span style="color: #c9d1d9">  Example sorter function for a dated list object</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| e | &lt;code&gt;Object&lt;/code&gt; | the worker post event with a `data` object with a list of records to sort by the date keys |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;hr /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_usePost&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## usePost</span></span>\n<span class="line"><span style="color: #c9d1d9">Get and handle a particular post by it&#39;s tag and hash</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">* [usePost](#module_usePost)</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _static_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.usePost(options)](#module_usePost.usePost) \u21D2 &lt;code&gt;Post&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.addPost(tag, post)](#module_usePost.addPost)</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.downloadPost(post)](#module_usePost.downloadPost)</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.parsePost(data)](#module_usePost.parsePost) \u21D2 &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.usePostTimestamp()](#module_usePost.usePostTimestamp) \u21D2</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _inner_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~Post](#module_usePost..Post) : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### usePost(options) \u21D2 &lt;code&gt;Post&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  An interface to manage a post</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| options | &lt;code&gt;Object&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Example**  </span></span>\n<span class="line"><span style="color: #c9d1d9">```js</span></span>\n<span class="line"><span style="color: #c9d1d9">const post = usePost({ tag: &#39;tag&#39;, hash: postHash })</span></span>\n<span class="line"><span style="color: #c9d1d9">```</span></span>\n<span class="line"><span style="color: #c9d1d9">### addPost(tag, post)</span></span>\n<span class="line"><span style="color: #c9d1d9">  Add a new post to a tag</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| tag | &lt;code&gt;String&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9">| post | &lt;code&gt;Object&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Example**  </span></span>\n<span class="line"><span style="color: #c9d1d9">```js</span></span>\n<span class="line"><span style="color: #c9d1d9">import { addPost } from &#39;@gun-vue/composables&#39;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">addPost(&#39;MyTag&#39;, {</span></span>\n<span class="line"><span style="color: #c9d1d9"> title: &#39;New post&#39;</span></span>\n<span class="line"><span style="color: #c9d1d9">})</span></span>\n<span class="line"><span style="color: #c9d1d9">```</span></span>\n<span class="line"><span style="color: #c9d1d9">### downloadPost(post)</span></span>\n<span class="line"><span style="color: #c9d1d9">  Download the post as a zip file with MD contents and icon and cover pictures if present</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| post | &lt;code&gt;Post&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Example**  </span></span>\n<span class="line"><span style="color: #c9d1d9">```js</span></span>\n<span class="line"><span style="color: #c9d1d9">import { downloadPost, usePost } from &#39;@gun-vue/composables&#39;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">const {post} = usePost( postTag, postHash )</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">downloadPost(post)</span></span>\n<span class="line"><span style="color: #c9d1d9">```</span></span>\n<span class="line"><span style="color: #c9d1d9">### parsePost(data) \u21D2 &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Parse a post string from db</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Returns**: &lt;code&gt;Object&lt;/code&gt; - Post object  </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| data | &lt;code&gt;String&lt;/code&gt; | Stringified data from the hashed post |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### usePostTimestamp() \u21D2</span></span>\n<span class="line"><span style="color: #c9d1d9">  Get and update the timestamp of an immutable post</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Returns**: - {timestamp, msTime, refresh}  </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">|  | {tag, hash} |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### Post : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  **Properties**</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Name | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| empty | &lt;code&gt;Boolean&lt;/code&gt; | whether the post has contents |</span></span>\n<span class="line"><span style="color: #c9d1d9">| tag | &lt;code&gt;String&lt;/code&gt; | the tag under which the post was published |</span></span>\n<span class="line"><span style="color: #c9d1d9">| hash | &lt;code&gt;String&lt;/code&gt; | the hash of the contents |</span></span>\n<span class="line"><span style="color: #c9d1d9">| data | &lt;code&gt;Object&lt;/code&gt; | the contents of the post |</span></span>\n<span class="line"><span style="color: #c9d1d9">| download | &lt;code&gt;function&lt;/code&gt; | use this function to download the post as a Markdown file |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Example**  </span></span>\n<span class="line"><span style="color: #c9d1d9">```js</span></span>\n<span class="line"><span style="color: #c9d1d9">{</span></span>\n<span class="line"><span style="color: #c9d1d9"> &quot;empty&quot;: false,</span></span>\n<span class="line"><span style="color: #c9d1d9"> &quot;tag&quot;: &quot;ds&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9"> &quot;hash&quot;: &quot;C8trDBYNyvxVedHK4Q0IuUarc/k2/iiv8opPfoAU0xA=&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9"> &quot;data&quot;: {</span></span>\n<span class="line"><span style="color: #c9d1d9">   &quot;cover&quot;: &quot;data:image/png;base64,..........&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">   &quot;icon&quot;: &quot;data:image/png;base64,..........&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">   &quot;title&quot;: &quot;OSS&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">   &quot;statement&quot;: &quot;New live album by tsoop&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">   &quot;youtube&quot;: &quot;K2MwpOd8vEI&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">   &quot;content&quot;: &quot;It&#39;s mostly op-z + op-1 with my own Unity visuals based on [Chromatone](https://chromatone.center) system.\\n\\n### 2021\\nFirst played live at April 20th **2021**.\\n\\n### Into 2022\\nIt&#39;s an ongoing live album to be recorded throughout the **2022**.&quot;</span></span>\n<span class="line"><span style="color: #c9d1d9">},</span></span>\n<span class="line"><span style="color: #c9d1d9"> &quot;timestamp&quot;: 1642590655747,</span></span>\n<span class="line"><span style="color: #c9d1d9"> &quot;lastUpdated&quot;: &quot;1d&quot;</span></span>\n<span class="line"><span style="color: #c9d1d9">}</span></span>\n<span class="line"><span style="color: #c9d1d9">```</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;hr /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_usePosts&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## usePosts</span></span>\n<span class="line"><span style="color: #c9d1d9">Get and handle a particular post by it&#39;s tag and hash</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">* [usePosts](#module_usePosts)</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _static_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.usePosts(tag, options)](#module_usePosts.usePosts) \u21D2 &lt;code&gt;usePosts&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.downloadFeed(tag, posts)](#module_usePosts.downloadFeed)</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.uploadFeed(tag, files)](#module_usePosts.uploadFeed)</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _inner_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~usePosts](#module_usePosts..usePosts)</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### usePosts(tag, options) \u21D2 &lt;code&gt;usePosts&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Use a list of immutable data from a #tag</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| tag | &lt;code&gt;String&lt;/code&gt; | A vue ref to watch - generated from props by `toRef(props,&#39;tag&#39;)` |</span></span>\n<span class="line"><span style="color: #c9d1d9">| options | &lt;code&gt;Object&lt;/code&gt; | Options for the feed |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Example**  </span></span>\n<span class="line"><span style="color: #c9d1d9">```js</span></span>\n<span class="line"><span style="color: #c9d1d9">import { usePosts } from &#39;@gun-vue/composables&#39;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">const { posts, timestamps, count, uploadPosts, downloadPosts} = usePosts(&#39;MyTag&#39;)</span></span>\n<span class="line"><span style="color: #c9d1d9">```</span></span>\n<span class="line"><span style="color: #c9d1d9">### downloadFeed(tag, posts)</span></span>\n<span class="line"><span style="color: #c9d1d9">  Export a list of posts as a zip file</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| tag | &lt;code&gt;String&lt;/code&gt; | Name of the tag |</span></span>\n<span class="line"><span style="color: #c9d1d9">| posts | &lt;code&gt;Object&lt;/code&gt; | Posts to export |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Example**  </span></span>\n<span class="line"><span style="color: #c9d1d9">```js</span></span>\n<span class="line"><span style="color: #c9d1d9">import {downloadFeed} from &#39;@gun-vue/components&#39;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">downloadFeed(&#39;myTag&#39;,posts)</span></span>\n<span class="line"><span style="color: #c9d1d9">```</span></span>\n<span class="line"><span style="color: #c9d1d9">### uploadFeed(tag, files)</span></span>\n<span class="line"><span style="color: #c9d1d9">  Upload zip files and add all the MD files from it to the tag</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| tag | &lt;code&gt;String&lt;/code&gt; | a tag to add the posts to |</span></span>\n<span class="line"><span style="color: #c9d1d9">| files | &lt;code&gt;FileList&lt;/code&gt; | File list from the input `@change` event |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Example**  </span></span>\n<span class="line"><span style="color: #c9d1d9">```js</span></span>\n<span class="line"><span style="color: #c9d1d9">import { uploadFeed } from &#39;@gun-vue/composables&#39;</span></span>\n<span class="line"><span style="color: #c9d1d9">```</span></span>\n<span class="line"><span style="color: #c9d1d9">**Example**  </span></span>\n<span class="line"><span style="color: #c9d1d9">```html</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;input type=&quot;file&quot; @change=&quot;uploadFeed( &#39;myTag&#39;, $event.target.files )&quot; /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">```</span></span>\n<span class="line"><span style="color: #c9d1d9">### usePosts</span></span>\n<span class="line"><span style="color: #c9d1d9">  **Properties**</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Name | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| posts | &lt;code&gt;ref&lt;/code&gt; | the reactive list of hashed data |</span></span>\n<span class="line"><span style="color: #c9d1d9">| timestamps | &lt;code&gt;ref&lt;/code&gt; | reactive timestamps list for all posts in a list |</span></span>\n<span class="line"><span style="color: #c9d1d9">| count | &lt;code&gt;computed&lt;/code&gt; | the number of posts in a feed |</span></span>\n<span class="line"><span style="color: #c9d1d9">| downloadPosts | &lt;code&gt;function&lt;/code&gt; | Download all posts in a zip file |</span></span>\n<span class="line"><span style="color: #c9d1d9">| uploadPosts | &lt;code&gt;function&lt;/code&gt; | upload a zip file with posts |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;hr /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_useReaction&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## useReaction</span></span>\n<span class="line"><span style="color: #c9d1d9">React to posts with emojis</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;hr /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_useReactions&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## useReactions</span></span>\n<span class="line"><span style="color: #c9d1d9">Reactions to posts with emojis</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;hr /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_useTags&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## useTags</span></span>\n<span class="line"><span style="color: #c9d1d9">Get and handle a particular post by it&#39;s tag and hash</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">* [useTags](#module_useTags)</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _static_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.useTagList()](#module_useTags.useTagList) \u21D2 &lt;code&gt;useTagList&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _inner_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~useTagList](#module_useTags..useTagList)</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### useTagList() \u21D2 &lt;code&gt;useTagList&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Toolkit to deal with the available tags</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### useTagList</span></span>\n<span class="line"><span style="color: #c9d1d9">  **Properties**</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Name | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| search | &lt;code&gt;ref&lt;/code&gt; | a ref to bind to an input element |</span></span>\n<span class="line"><span style="color: #c9d1d9">| slug | &lt;code&gt;computed&lt;/code&gt; | a slugified search query - url safe verion to be used as a tag |</span></span>\n<span class="line"><span style="color: #c9d1d9">| tags | &lt;code&gt;Tags&lt;/code&gt; | the object to handle all the tags |</span></span>\n<span class="line"><span style="color: #c9d1d9">| addTag | &lt;code&gt;function&lt;/code&gt; | add a slug tag to the list |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;hr /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_Projects&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## Projects</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;hr /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_useRoom&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## useRoom</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">* [useRoom](#module_useRoom)</span></span>\n<span class="line"><span style="color: #c9d1d9">    * [.useRoom()](#module_useRoom.useRoom) \u21D2 &lt;code&gt;useRoom&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    * [.updateRoomProfile(field, content)](#module_useRoom.updateRoomProfile)</span></span>\n<span class="line"><span style="color: #c9d1d9">    * [.createRoom()](#module_useRoom.createRoom)</span></span>\n<span class="line"><span style="color: #c9d1d9">    * [.enterRoom(pub)](#module_useRoom.enterRoom)</span></span>\n<span class="line"><span style="color: #c9d1d9">    * [.leaveRoom()](#module_useRoom.leaveRoom)</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### useRoom() \u21D2 &lt;code&gt;useRoom&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Reactive room controls</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### updateRoomProfile(field, content)</span></span>\n<span class="line"><span style="color: #c9d1d9">  Update a profile field of a room</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| field | &lt;code&gt;String&lt;/code&gt; | parameter to write to |</span></span>\n<span class="line"><span style="color: #c9d1d9">| content | &lt;code&gt;String&lt;/code&gt; |  |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### createRoom()</span></span>\n<span class="line"><span style="color: #c9d1d9">  Create a new room inside the current room</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### enterRoom(pub)</span></span>\n<span class="line"><span style="color: #c9d1d9">  The right way to come inside a room</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| pub | &lt;code&gt;String&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### leaveRoom()</span></span>\n<span class="line"><span style="color: #c9d1d9">  Leave the room</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;hr /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_useSpace&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## useSpace</span></span>\n<span class="line"><span style="color: #c9d1d9">A 2D-space</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">* [useSpace](#module_useSpace)</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _static_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.useSpace()](#module_useSpace.useSpace) \u21D2 &lt;code&gt;useSpace&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _inner_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~useSpace](#module_useSpace..useSpace) : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### useSpace() \u21D2 &lt;code&gt;useSpace&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  A space to navigate with mouse clicks</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Example**  </span></span>\n<span class="line"><span style="color: #c9d1d9">```js</span></span>\n<span class="line"><span style="color: #c9d1d9">const { space, plane, links, width, height, guests, area, join } = useSpace({</span></span>\n<span class="line"><span style="color: #c9d1d9">TIMEOUT: 10000,</span></span>\n<span class="line"><span style="color: #c9d1d9">})</span></span>\n<span class="line"><span style="color: #c9d1d9">```</span></span>\n<span class="line"><span style="color: #c9d1d9">### useSpace : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  **Properties**</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Name | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| space | &lt;code&gt;reactive&lt;/code&gt; | The main object |</span></span>\n<span class="line"><span style="color: #c9d1d9">| guests | &lt;code&gt;reactive&lt;/code&gt; | Active guests |</span></span>\n<span class="line"><span style="color: #c9d1d9">| links | &lt;code&gt;reactive&lt;/code&gt; | Links between active guests |</span></span>\n<span class="line"><span style="color: #c9d1d9">| plane | &lt;code&gt;ref&lt;/code&gt; | The SVG element |</span></span>\n<span class="line"><span style="color: #c9d1d9">| area | &lt;code&gt;ref&lt;/code&gt; | The rect element for mouse events capture |</span></span>\n<span class="line"><span style="color: #c9d1d9">| width | &lt;code&gt;ref&lt;/code&gt; | Width of the plane |</span></span>\n<span class="line"><span style="color: #c9d1d9">| height | &lt;code&gt;ref&lt;/code&gt; | Height of the plane |</span></span>\n<span class="line"><span style="color: #c9d1d9">| join | &lt;code&gt;function&lt;/code&gt; | Join the space with the current user |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;hr /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_useColor&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## useColor</span></span>\n<span class="line"><span style="color: #c9d1d9">Deterministic colors derived from oub keys, hashes or any other string data</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### useColor(palette) \u21D2 &lt;code&gt;ColorHash&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Get a color generator of a certain palette</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Returns**: &lt;code&gt;ColorHash&lt;/code&gt; - Color-Hash instance  </span></span>\n<span class="line"><span style="color: #c9d1d9">**See**: https://github.com/zenozeng/color-hash  </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| palette | &lt;code&gt;&amp;#x27;light&amp;#x27;&lt;/code&gt; \\| &lt;code&gt;&amp;#x27;regular&amp;#x27;&lt;/code&gt; \\| &lt;code&gt;&amp;#x27;deep&amp;#x27;&lt;/code&gt; \\| &lt;code&gt;&amp;#x27;dark&amp;#x27;&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Example**  </span></span>\n<span class="line"><span style="color: #c9d1d9">```js</span></span>\n<span class="line"><span style="color: #c9d1d9">import {useColor} from &#39;@gun-vue/composables&#39;</span></span>\n<span class="line"><span style="color: #c9d1d9">const colorDeep = useColor(&#39;deep&#39;)</span></span>\n<span class="line"><span style="color: #c9d1d9">const color = colorDeep.hex(&#39;any text data&#39;)</span></span>\n<span class="line"><span style="color: #c9d1d9">// color == &#39;#e052ae&#39;</span></span>\n<span class="line"><span style="color: #c9d1d9">```</span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;hr /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_useMouse&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## useMouse</span></span>\n<span class="line"><span style="color: #c9d1d9">Handle mouse movement inside an SVG</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">* [useMouse](#module_useMouse)</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _static_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.useSvgMouse()](#module_useMouse.useSvgMouse) \u21D2 &lt;code&gt;useMouse&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _inner_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~useMouse](#module_useMouse..useMouse) : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~Mouse](#module_useMouse..Mouse) : &lt;code&gt;reactive&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### useSvgMouse() \u21D2 &lt;code&gt;useMouse&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Correct mouse position in an SVG space</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### useMouse : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  **Properties**</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Name | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| area | &lt;code&gt;ref&lt;/code&gt; | an area to mount the mouse to |</span></span>\n<span class="line"><span style="color: #c9d1d9">| mouse | &lt;code&gt;Mouse&lt;/code&gt; | the reactive mouse parameters |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### Mouse : &lt;code&gt;reactive&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  **Properties**</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Name | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| x | &lt;code&gt;Number&lt;/code&gt; | absolute X coordinate to place a marker to |</span></span>\n<span class="line"><span style="color: #c9d1d9">| y | &lt;code&gt;Number&lt;/code&gt; | absolute Y coordinate to place a marker to |</span></span>\n<span class="line"><span style="color: #c9d1d9">| normX | &lt;code&gt;Number&lt;/code&gt; | [0-1] relative X coordinate |</span></span>\n<span class="line"><span style="color: #c9d1d9">| normY | &lt;code&gt;Number&lt;/code&gt; | [0-1] relative Y coordinate |</span></span>\n<span class="line"><span style="color: #c9d1d9">| pressed | &lt;code&gt;Boolean&lt;/code&gt; | is mouse pressed? |</span></span>\n<span class="line"><span style="color: #c9d1d9">| inside | &lt;code&gt;Boolean&lt;/code&gt; | is mouse inside the area? |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;hr /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_useMates&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## useMates</span></span>\n<span class="line"><span style="color: #c9d1d9">Connections between accounts</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">* [useMates](#module_useMates)</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _static_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.useMates(pub)](#module_useMates.useMates) \u21D2 &lt;code&gt;useMates&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.getFirstEmoji(text)](#module_useMates.getFirstEmoji) \u21D2 &lt;code&gt;String&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.isEmoji(text)](#module_useMates.isEmoji) \u21D2 &lt;code&gt;Boolean&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.useMate(pub)](#module_useMates.useMate) \u21D2 &lt;code&gt;useMate&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _inner_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~useMates](#module_useMates..useMates) : &lt;code&gt;reactive&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~useMate](#module_useMates..useMate) : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### useMates(pub) \u21D2 &lt;code&gt;useMates&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Get a reactive list of the user&#39;s mates</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| pub | &lt;code&gt;String&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### getFirstEmoji(text) \u21D2 &lt;code&gt;String&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Break the string into graphemes and return the first one if it&#39;s an emoji</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Returns**: &lt;code&gt;String&lt;/code&gt; - Emoji  </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| text | &lt;code&gt;String&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### isEmoji(text) \u21D2 &lt;code&gt;Boolean&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Check if the text has emojis</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| text | &lt;code&gt;String&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### useMate(pub) \u21D2 &lt;code&gt;useMate&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Make mates with some account by current user</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| pub | &lt;code&gt;String&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### useMates : &lt;code&gt;reactive&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  ### useMate : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  **Properties**</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Name | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| emoji | &lt;code&gt;ref&lt;/code&gt; | change it in an input |</span></span>\n<span class="line"><span style="color: #c9d1d9">| isMate | &lt;code&gt;ref&lt;/code&gt; | reactive state of connection |</span></span>\n<span class="line"><span style="color: #c9d1d9">| toggleMate | &lt;code&gt;function&lt;/code&gt; | toggle the link with current `emoji` ref |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;hr /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_usePass&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## usePass</span></span>\n<span class="line"><span style="color: #c9d1d9">Manage user&#39;s password and credentials</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">* [usePass](#module_usePass)</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _static_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.usePass()](#module_usePass.usePass) \u21D2 &lt;code&gt;usePass&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _inner_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~Pass](#module_usePass..Pass) : &lt;code&gt;reactive&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~usePass](#module_usePass..usePass) : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### usePass() \u21D2 &lt;code&gt;usePass&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Manage password of a user</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### Pass : &lt;code&gt;reactive&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  **Properties**</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Name | Type |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| safe | &lt;code&gt;Object&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9">| dec | &lt;code&gt;Object&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### usePass : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  **Properties**</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Name | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| pass | &lt;code&gt;Pass&lt;/code&gt; | the reactive password object |</span></span>\n<span class="line"><span style="color: #c9d1d9">| setPass | &lt;code&gt;function&lt;/code&gt; |  |</span></span>\n<span class="line"><span style="color: #c9d1d9">| logWithPass | &lt;code&gt;function&lt;/code&gt; |  |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;hr /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;a name=&quot;module_useUser&quot;&gt;&lt;/a&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">## useUser</span></span>\n<span class="line"><span style="color: #c9d1d9">Basic user management</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">* [useUser](#module_useUser)</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _static_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.useUser()](#module_useUser.useUser) \u21D2 &lt;code&gt;useUser&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.auth(pair)](#module_useUser.auth)</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.leave()](#module_useUser.leave)</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.addProfileField(name)](#module_useUser.addProfileField)</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.updateProfile(field, data)](#module_useUser.updateProfile)</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [.isPair(pair)](#module_useUser.isPair) \u21D2 &lt;code&gt;Boolean&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">    * _inner_</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~Account](#module_useUser..Account) : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~User](#module_useUser..User) : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">        * [~useUser](#module_useUser..useUser)</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### useUser() \u21D2 &lt;code&gt;useUser&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Get access to current logged in user</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Example**  </span></span>\n<span class="line"><span style="color: #c9d1d9">```js</span></span>\n<span class="line"><span style="color: #c9d1d9">import { useUser } from &#39;@gun-vue/composables&#39;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">const { user, auth, leave } = useUser()</span></span>\n<span class="line"><span style="color: #c9d1d9">```</span></span>\n<span class="line"><span style="color: #c9d1d9">### auth(pair)</span></span>\n<span class="line"><span style="color: #c9d1d9">  Authenticate with a SEA key pair</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| pair | &lt;code&gt;Object&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Example**  </span></span>\n<span class="line"><span style="color: #c9d1d9">```js</span></span>\n<span class="line"><span style="color: #c9d1d9">import { auth, SEA } from &#39;@gun-vue/composables&#39;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">async function login() {</span></span>\n<span class="line"><span style="color: #c9d1d9">   const pair = await SEA.pair()</span></span>\n<span class="line"><span style="color: #c9d1d9">   auth(pair)</span></span>\n<span class="line"><span style="color: #c9d1d9">}</span></span>\n<span class="line"><span style="color: #c9d1d9">```</span></span>\n<span class="line"><span style="color: #c9d1d9">### leave()</span></span>\n<span class="line"><span style="color: #c9d1d9">  Log out the user</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Example**  </span></span>\n<span class="line"><span style="color: #c9d1d9">```js</span></span>\n<span class="line"><span style="color: #c9d1d9">import { leave } from &#39;@gun-vue/composables&#39;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">leave()</span></span>\n<span class="line"><span style="color: #c9d1d9">```</span></span>\n<span class="line"><span style="color: #c9d1d9">### addProfileField(name)</span></span>\n<span class="line"><span style="color: #c9d1d9">  Add a field to the User profile</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| name | &lt;code&gt;String&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Example**  </span></span>\n<span class="line"><span style="color: #c9d1d9">```js</span></span>\n<span class="line"><span style="color: #c9d1d9">import { addProfileField } from &#39;@gun-vue/composables&#39;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">addProfileField( &#39;city&#39; )</span></span>\n<span class="line"><span style="color: #c9d1d9">```</span></span>\n<span class="line"><span style="color: #c9d1d9">### updateProfile(field, data)</span></span>\n<span class="line"><span style="color: #c9d1d9">  Update a profile field</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| field | &lt;code&gt;String&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9">| data | &lt;code&gt;Any&lt;/code&gt; | </span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Example**  </span></span>\n<span class="line"><span style="color: #c9d1d9">```js</span></span>\n<span class="line"><span style="color: #c9d1d9">import { updateProfile } from &#39;@gun-vue/composables&#39;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">updateProfile( &#39;city&#39;, &#39;Moscow&#39; )</span></span>\n<span class="line"><span style="color: #c9d1d9">```</span></span>\n<span class="line"><span style="color: #c9d1d9">### isPair(pair) \u21D2 &lt;code&gt;Boolean&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  Check if the object is a proper SEA pair</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Param | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| pair | &lt;code&gt;Object&lt;/code&gt; | an object to check |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">### Account : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  the user account interface</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Properties**</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Name | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| pub | &lt;code&gt;ref&lt;/code&gt; | The pub key used to build the account |</span></span>\n<span class="line"><span style="color: #c9d1d9">| color | &lt;code&gt;computed&lt;/code&gt; | The user account color derived from the pub key |</span></span>\n<span class="line"><span style="color: #c9d1d9">| profile | &lt;code&gt;Object&lt;/code&gt; | An object with all the `gun.user().get(&#39;profile&#39;)` data |</span></span>\n<span class="line"><span style="color: #c9d1d9">| pulse | &lt;code&gt;Number&lt;/code&gt; | latest timestamp from the user. It&#39;s emitted every second. Offline timeout is set to 10 seconds. |</span></span>\n<span class="line"><span style="color: #c9d1d9">| blink | &lt;code&gt;Boolean&lt;/code&gt; | A boolean that toggles on every timestamp received |</span></span>\n<span class="line"><span style="color: #c9d1d9">| lastSeen | &lt;code&gt;Sting&lt;/code&gt; | Shows &#39;online&#39; if recent pulse is less then 10s ago or a human readable time string |</span></span>\n<span class="line"><span style="color: #c9d1d9">| db | &lt;code&gt;gun&lt;/code&gt; | `gun.user(pub)` ref to query any additional user data |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Example**  </span></span>\n<span class="line"><span style="color: #c9d1d9">```js</span></span>\n<span class="line"><span style="color: #c9d1d9">{</span></span>\n<span class="line"><span style="color: #c9d1d9">&quot;pub&quot;: &quot;XnpLVDYZWdl1NNgo6BlD6e3-n3Fzi-ZzVrzbIgYCYHo.9-hHUHaWNaAE6tMp800MMzNtDLtjicS53915IrBu4uc&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">&quot;color&quot;: &quot;#f55c3d&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">&quot;profile&quot;: {</span></span>\n<span class="line"><span style="color: #c9d1d9">   &quot;name&quot;: &quot;Accord&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">   &quot;Message&quot;: &quot;Use your imagination!&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">   &quot;Money&quot;: &quot;$ 20000000000&quot;</span></span>\n<span class="line"><span style="color: #c9d1d9">},</span></span>\n<span class="line"><span style="color: #c9d1d9">&quot;pulse&quot;: 1642077216809,</span></span>\n<span class="line"><span style="color: #c9d1d9">&quot;lastSeen&quot;: &quot;online&quot;,</span></span>\n<span class="line"><span style="color: #c9d1d9">&quot;blink&quot;: true</span></span>\n<span class="line"><span style="color: #c9d1d9">}</span></span>\n<span class="line"><span style="color: #c9d1d9">```</span></span>\n<span class="line"><span style="color: #c9d1d9">### User : &lt;code&gt;Object&lt;/code&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9">  An interface to the current gun user</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Properties**</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Name | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| initiated | &lt;code&gt;Boolean&lt;/code&gt; | `true` if useUser has been run at least once |</span></span>\n<span class="line"><span style="color: #c9d1d9">| is | &lt;code&gt;Object&lt;/code&gt; | Reactive `gun.user().is` |</span></span>\n<span class="line"><span style="color: #c9d1d9">| pub | &lt;code&gt;String&lt;/code&gt; | Current user public key |</span></span>\n<span class="line"><span style="color: #c9d1d9">| color | &lt;code&gt;String&lt;/code&gt; | a HEX color for the given pub |</span></span>\n<span class="line"><span style="color: #c9d1d9">| pulse | &lt;code&gt;Number&lt;/code&gt; | Last received pulse timestamp |</span></span>\n<span class="line"><span style="color: #c9d1d9">| pulser | &lt;code&gt;Number&lt;/code&gt; | An id for pulse `setInterval` |</span></span>\n<span class="line"><span style="color: #c9d1d9">| blink | &lt;code&gt;Boolean&lt;/code&gt; | Toggles with every pulse received |</span></span>\n<span class="line"><span style="color: #c9d1d9">| db | &lt;code&gt;Object&lt;/code&gt; | `gun.user()` reference |</span></span>\n<span class="line"><span style="color: #c9d1d9">| safe | &lt;code&gt;Object&lt;/code&gt; | safe account indicators |</span></span>\n<span class="line"><span style="color: #c9d1d9">| pair | &lt;code&gt;function&lt;/code&gt; | use `user.pair()` to get curent user key pair |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">**Example**  </span></span>\n<span class="line"><span style="color: #c9d1d9">```js</span></span>\n<span class="line"><span style="color: #c9d1d9">{ </span></span>\n<span class="line"><span style="color: #c9d1d9"> &quot;initiated&quot;: true, </span></span>\n<span class="line"><span style="color: #c9d1d9"> &quot;is&quot;: { </span></span>\n<span class="line"><span style="color: #c9d1d9">   &quot;pub&quot;: &quot;XnpLVDYZWdl1NNgo6BlD6e3-n3Fzi-ZzVrzbIgYCYHo.9-hHUHaWNaAE6tMp800MMzNtDLtjicS53915IrBu4uc&quot;, </span></span>\n<span class="line"><span style="color: #c9d1d9">   &quot;epub&quot;: &quot;wAvPlMAg4jvUvK4sPpVyF1CAWnRCMu1YpHnoDrVDg-o.l79QDmdPCLEiO0F_WkB3zYLpJt-lANtyhNmHSM4bTes&quot;, </span></span>\n<span class="line"><span style="color: #c9d1d9">   &quot;alias&quot;: &quot;XnpLVDYZWdl1NNgo6BlD6e3-n3Fzi-ZzVrzbIgYCYHo.9-hHUHaWNaAE6tMp800MMzNtDLtjicS53915IrBu4uc&quot; </span></span>\n<span class="line"><span style="color: #c9d1d9"> }, </span></span>\n<span class="line"><span style="color: #c9d1d9"> &quot;name&quot;: &quot;Accord&quot;, </span></span>\n<span class="line"><span style="color: #c9d1d9"> &quot;pub&quot;: &quot;XnpLVDYZWdl1NNgo6BlD6e3-n3Fzi-ZzVrzbIgYCYHo.9-hHUHaWNaAE6tMp800MMzNtDLtjicS53915IrBu4uc&quot;, </span></span>\n<span class="line"><span style="color: #c9d1d9"> &quot;color&quot;: &quot;#f55c3d&quot;, </span></span>\n<span class="line"><span style="color: #c9d1d9"> &quot;pulse&quot;: 1642708061615, </span></span>\n<span class="line"><span style="color: #c9d1d9"> &quot;pulser&quot;: 12, </span></span>\n<span class="line"><span style="color: #c9d1d9"> &quot;blink&quot;: false, </span></span>\n<span class="line"><span style="color: #c9d1d9"> &quot;safe&quot;: { </span></span>\n<span class="line"><span style="color: #c9d1d9">   &quot;saved&quot;: true, </span></span>\n<span class="line"><span style="color: #c9d1d9">   &quot;password&quot;: null, </span></span>\n<span class="line"><span style="color: #c9d1d9">   &quot;enc&quot;: &quot;SEA{\\&quot;ct\\&quot;:\\&quot;E+6GViU9dTuidruOCNAoBITE+AlGNRgiABplSbL5fh4v1P+fhF33MuBwKd3ssBNi2kJ1sCzvS/YLmzivECA5ARZPGVbgXTSj8AE9kCz0Ac/8ushlsfBNdt8s3+a3OPVxMIevnT01uqcgr75Zp4TugIg/YuB5WltA9RHsgWEMlo+X+tRGaqG5rfw4sAmTSV0P8evMgM9rN/Un5t/WeDbvIPNXqZEmtxwAhMUZwOJWZckNZmNwpxnelFO0BwmauWfzkXuqGeSxNhMeaZi+VoRDMUvTjT68DLBnVoOhFhcdco+RW8AJfktZHZ4GF2IzFnQmTGpUd2LfvIY/Yn1eNJH7iQ5w41ChiYB/zhgQCOc5ur51PV6swAuN595vUNn7+0J1JRSNGzW2V/4j4YR4IEsAoqOtdn2Y21ga/CFdrE0=\\&quot;,\\&quot;iv\\&quot;:\\&quot;LtODTV+LBzhWHqUcptUO\\&quot;,\\&quot;s\\&quot;:\\&quot;XCL9Uj1YlPcV\\&quot;}&quot;, </span></span>\n<span class="line"><span style="color: #c9d1d9"> &quot;pass&quot;: &quot;SEA{\\&quot;ct\\&quot;:\\&quot;8wNClMx/ebfou+gGWdf+bbx0TAgc9RU=\\&quot;,\\&quot;iv\\&quot;:\\&quot;NPgHkI+Ke+i/mw+3chlr\\&quot;,\\&quot;s\\&quot;:\\&quot;3VzGv06Y4fQ+\\&quot;}&quot; </span></span>\n<span class="line"><span style="color: #c9d1d9"> } </span></span>\n<span class="line"><span style="color: #c9d1d9">}</span></span>\n<span class="line"><span style="color: #c9d1d9">```</span></span>\n<span class="line"><span style="color: #c9d1d9">### useUser</span></span>\n<span class="line"><span style="color: #c9d1d9">  **Properties**</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">| Name | Type | Description |</span></span>\n<span class="line"><span style="color: #c9d1d9">| --- | --- | --- |</span></span>\n<span class="line"><span style="color: #c9d1d9">| user | &lt;code&gt;User&lt;/code&gt; | the user interface |</span></span>\n<span class="line"><span style="color: #c9d1d9">| auth | &lt;code&gt;function&lt;/code&gt; | auth with a pair |</span></span>\n<span class="line"><span style="color: #c9d1d9">| leave | &lt;code&gt;function&lt;/code&gt; | log out |</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9">&lt;hr /&gt;</span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span>\n<span class="line"><span style="color: #c9d1d9"></span></span></code></pre></div></code></pre>\n';
};
const _sfc_main = {};
function _sfc_render(_ctx, _cache) {
  const _component_Story = resolveComponent("Story");
  return openBlock(), createBlock(_component_Story, {
    title: "Composables",
    "docs-only": "",
    icon: "la:book-open",
    group: "docs"
  });
}
if (typeof block0 === "function")
  block0(_sfc_main);
_sfc_main.__file = "src/docs/Composables.story.vue";
const Composables_story = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__scopeId", "data-v-e5b27f19"], ["__file", "/Users/davay/Documents/\u0424\u0420\u0423\u041A\u0422/DeFUCC/gun-vue/components/src/docs/Composables.story.vue"]]);
export {
  Composables_story as default
};
